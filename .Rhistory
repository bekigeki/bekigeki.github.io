leaflet()%>%
addProviderTiles(providers$OpenTopoMap,
options = providerTileOptions(opacity=.5)) %>%
addPolygons(data = kreise_th_t,
weight = 1)%>%
addHeatmap(data = gs,
lng=~as.numeric(lon),
lat=~as.numeric(lat),max=10,radius=15,blur=10)%>%
addCircleMarkers(data=ts_school,
lng=~as.numeric(lon),
lat=~as.numeric(lat),
group = "name",
popup=popupTable(ts_school,row.numbers=FALSE,
feature.id=FALSE,
zcol=c("Schulname","Schulnummer")),
radius = 3,
#   color=~GrundschulCol(Grundschulen),
stroke = FALSE,
fillOpacity = 1
)  %>%
addCircleMarkers(data=nt,
color="white",
lng=~as.numeric(lon),
lat=~as.numeric(lat),
group = "name",
popup=popupTable(nt,row.numbers=FALSE,
feature.id=FALSE,
zcol=c("Schulname","Schulnummer")),
radius = 1,
#   color=~GrundschulCol(Grundschulen),
stroke = FALSE,
fillOpacity = 1
)
# Kreise Deutschlandweit
kreise <- sf::st_read("./data/sg.geodatenzentrum.de/2023-01-24/vg5000_12-31.utm32s.shape.ebenen/vg5000_ebenen_1231/VG5000_KRS.shp")
# Kreise Thueringen
kreise_th <- subset(kreise, grepl("^16",as.character(kreise$ARS)))
plot(kreise_th$geometry)
kreise_th_t<- st_transform(kreise_th$geometry, crs = "+proj=longlat +datum=WGS84")
GrundschulCol <- colorBin(bins = 2,"Reds", domain = 0:1)
years <- unique(d$cohort)
ts_school <- d |>
group_by(Name,School,lat,lon) |>
dplyr::summarize(Sch端lerzahl = n(),.groups="drop")|>
ungroup()|>
rename(
"Schulnummer" = "School",
"Schulname" = "Name")
# Nichtteilnehmer
nt<-anti_join(gs,ts_school,by.y = "Schulnummer",by.x="School")|>
rename(
"Schulnummer" = "School",
"Schulname" = "Name")
#dplyr::filter(Jahr=="2022")|>
leaflet()%>%
addProviderTiles(providers$OpenTopoMap,
options = providerTileOptions(opacity=.5)) %>%
addPolygons(data = kreise_th_t,
weight = 1)%>%
addHeatmap(data = gs,
lng=~as.numeric(lon),
lat=~as.numeric(lat),max=10,radius=15,blur=10)%>%
addCircleMarkers(data=ts_school,
lng=~as.numeric(lon),
lat=~as.numeric(lat),
group = "name",
popup=popupTable(ts_school,row.numbers=FALSE,
feature.id=FALSE,
zcol=c("Schulname","Schulnummer")),
radius = 3,
#   color=~GrundschulCol(Grundschulen),
stroke = FALSE,
fillOpacity = 1
)  %>%
addCircleMarkers(data=nt,
color="white",
lng=~as.numeric(lon),
lat=~as.numeric(lat),
group = "name",
popup=popupTable(nt,row.numbers=FALSE,
feature.id=FALSE,
zcol=c("Schulname","Schulnummer")),
radius = 1,
#   color=~GrundschulCol(Grundschulen),
stroke = FALSE,
fillOpacity = 1
)
# Chunk 1
knitr::opts_chunk$set(echo=FALSE)
# Chunk 2
library(tidyverse)
library(dplyr)
library(kableExtra)
library(readxl)
library(sf)
library(leaflet)
library(leaflet.extras)
library(leafpop)
library(htmlwidgets)
library(webshot)
library(readxl)
# Chunk 3
d <- read_excel("./data/bekigeki_Urdaten_bis_2022-2023-05-05.xlsx")
gs <- read_csv("./data/schools-grundschulen-TW-2023-05-05.csv")
# Chunk 4
# Kreise Deutschlandweit
kreise <- sf::st_read("./data/sg.geodatenzentrum.de/2023-01-24/vg5000_12-31.utm32s.shape.ebenen/vg5000_ebenen_1231/VG5000_KRS.shp")
# Kreise Thueringen
kreise_th <- subset(kreise, grepl("^16",as.character(kreise$ARS)))
plot(kreise_th$geometry)
kreise_th_t<- st_transform(kreise_th$geometry, crs = "+proj=longlat +datum=WGS84")
GrundschulCol <- colorBin(bins = 2,"Reds", domain = 0:1)
years <- unique(d$cohort)
ts_school <- d |>
group_by(Name,School,lat,lon) |>
dplyr::summarize(Sch端lerzahl = n(),.groups="drop")|>
ungroup()|>
rename(
"Schulnummer" = "School",
"Schulname" = "Name")
# Nichtteilnehmer
nt<-anti_join(gs,ts_school,by.y = "Schulnummer",by.x="School")|>
rename(
"Schulnummer" = "School",
"Schulname" = "Name")
#dplyr::filter(Jahr=="2022")|>
leaflet()%>%
addProviderTiles(providers$OpenTopoMap,
options = providerTileOptions(opacity=.5)) %>%
addPolygons(data = kreise_th_t,
weight = 1)%>%
addHeatmap(data = gs,
lng=~as.numeric(lon),
lat=~as.numeric(lat),max=10,radius=15,blur=10)%>%
addCircleMarkers(data=ts_school,
lng=~as.numeric(lon),
lat=~as.numeric(lat),
group = "name",
popup=popupTable(ts_school,row.numbers=FALSE,
feature.id=FALSE,
zcol=c("Schulname","Schulnummer")),
radius = 3,
#   color=~GrundschulCol(Grundschulen),
stroke = FALSE,
fillOpacity = 1
)  %>%
addCircleMarkers(data=nt,
color="white",
lng=~as.numeric(lon),
lat=~as.numeric(lat),
group = "name",
popup=popupTable(nt,row.numbers=FALSE,
feature.id=FALSE,
zcol=c("Schulname","Schulnummer")),
radius = 1,
#   color=~GrundschulCol(Grundschulen),
stroke = FALSE,
fillOpacity = 1
)
d <- read_excel("./data/bekigeki_Urdaten_bis_2022-2023-05-05.xlsx")
gs <- read_csv("./data/schools-grundschulen-TW-2023-05-05.csv")
# Kreise Deutschlandweit
kreise <- sf::st_read("./data/sg.geodatenzentrum.de/2023-01-24/vg5000_12-31.utm32s.shape.ebenen/vg5000_ebenen_1231/VG5000_KRS.shp")
# Kreise Thueringen
kreise_th <- subset(kreise, grepl("^16",as.character(kreise$ARS)))
plot(kreise_th$geometry)
kreise_th_t<- st_transform(kreise_th$geometry, crs = "+proj=longlat +datum=WGS84")
GrundschulCol <- colorBin(bins = 2,"Reds", domain = 0:1)
years <- unique(d$cohort)
ts_school <- d |>
group_by(Name,School,lat,lon) |>
dplyr::summarize(Sch端lerzahl = n(),.groups="drop")|>
ungroup()|>
rename(
"Schulnummer" = "School",
"Schulname" = "Name")
# Nichtteilnehmer
nt<-anti_join(gs,ts_school,by.y = "Schulnummer",by.x="School")|>
rename(
"Schulnummer" = "School",
"Schulname" = "Name")
#dplyr::filter(Jahr=="2022")|>
leaflet()%>%
addProviderTiles(providers$OpenTopoMap,
options = providerTileOptions(opacity=.5)) %>%
addPolygons(data = kreise_th_t,
weight = 1)%>%
addHeatmap(data = gs,
lng=~as.numeric(lon),
lat=~as.numeric(lat),max=10,radius=15,blur=10)%>%
addCircleMarkers(data=ts_school,
lng=~as.numeric(lon),
lat=~as.numeric(lat),
group = "name",
popup=popupTable(ts_school,row.numbers=FALSE,
feature.id=FALSE,
zcol=c("Schulname","Schulnummer")),
radius = 3,
#   color=~GrundschulCol(Grundschulen),
stroke = FALSE,
fillOpacity = 1
)  %>%
addCircleMarkers(data=nt,
color="white",
lng=~as.numeric(lon),
lat=~as.numeric(lat),
group = "name",
popup=popupTable(nt,row.numbers=FALSE,
feature.id=FALSE,
zcol=c("Schulname","Schulnummer")),
radius = 1,
#   color=~GrundschulCol(Grundschulen),
stroke = FALSE,
fillOpacity = 1
)
d <- read_excel("./data/bekigeki_Urdaten_bis_2022-2023-05-05.xlsx")
gs <- read_csv("./data/schools-grundschulen-TW-2023-05-05.csv")
# Kreise Deutschlandweit
kreise <- sf::st_read("./data/sg.geodatenzentrum.de/2023-01-24/vg5000_12-31.utm32s.shape.ebenen/vg5000_ebenen_1231/VG5000_KRS.shp")
# Kreise Thueringen
kreise_th <- subset(kreise, grepl("^16",as.character(kreise$ARS)))
plot(kreise_th$geometry)
kreise_th_t<- st_transform(kreise_th$geometry, crs = "+proj=longlat +datum=WGS84")
# Kreise Deutschlandweit
kreise <- sf::st_read("./data/sg.geodatenzentrum.de/2023-01-24/vg5000_12-31.utm32s.shape.ebenen/vg5000_ebenen_1231/VG5000_KRS.shp")
# Kreise Thueringen
kreise_th <- subset(kreise, grepl("^16",as.character(kreise$ARS)))
plot(kreise_th$geometry)
kreise_th_t<- st_transform(kreise_th$geometry, crs = "+proj=longlat +datum=WGS84")
ts_school <- d |>
group_by(Name,School,lat,lon) |>
dplyr::summarize(Sch端lerzahl = n(),.groups="drop")|>
ungroup()|>
rename(
"Schulnummer" = "School",
"Schulname" = "Name")
# Nichtteilnehmer
nt<-anti_join(gs,ts_school,by.y = "Schulnummer",by.x="School")|>
rename(
"Schulnummer" = "School",
"Schulname" = "Name")
# Nichtteilnehmer
nt<-anti_join(gs,ts_school,by.y = "School",by.x="School")|>
rename(
"Schulnummer" = "School",
"Schulname" = "Name")
p1<-ggplot(ts_geo) +
geom_sf(data=kreise_th,fill="white", )+
geom_sf(size = 2,
aes(color=Veranstaltung),
show.legend = FALSE
#  color="#469cdd" # blau
#  color="#d22c4a"
#
) +
# theme(legend.position = "bottom")+
scale_color_manual(values=c("#009ee3","#9dc041"))+
facet_wrap(vars(Year),nrow=2)+
theme_void()
d$Type <- trimws(d$Type)
# Chunk 1
knitr::opts_chunk$set(echo=FALSE,cache=FALSE,results=FALSE)
# Chunk 2
library(tidyverse)
library(dplyr)
library(kableExtra)
library(readxl)
library(sf)
library(leaflet)
library(leaflet.extras)
library(leafpop)
library(htmlwidgets)
library(webshot)
library(readxl)
library(reactable)
library(ggplot2)
# Chunk 4
d <- read.csv("./data/events.csv")
# Kreise Deutschlandweit
kreise <- sf::st_read("./data/sg.geodatenzentrum.de/2023-01-24/vg5000_12-31.utm32s.shape.ebenen/vg5000_ebenen_1231/VG5000_LAN.shp")
# Kreise Thueringen
kreise_th <- subset(kreise, grepl("^16",as.character(kreise$ARS)))
#plot(kreise_th$geometry)
kreise_th_t<- st_transform(kreise_th$geometry, crs = "+proj=longlat +datum=WGS84")
ts_geo<- st_as_sf(d,
coords = c("longitude", "latitude"),
crs = 4326,
agr = "constant"
)|>
rename(Veranstaltung=Type)
# Chunk 5
p1<-ggplot(ts_geo) +
geom_sf(data=kreise_th,fill="white", )+
geom_sf(size = 2,
aes(color=Veranstaltung),
show.legend = FALSE
#  color="#469cdd" # blau
#  color="#d22c4a"
#
) +
# theme(legend.position = "bottom")+
scale_color_manual(values=c("#009ee3","#9dc041"))+
facet_wrap(vars(Year),nrow=2)+
theme_void()
d$Type <- trimws(d$Type)
p2<-ggplot(d,aes(x=Year,fill=Type,group=Type))+
geom_bar()+
annotate("text", x = 2020.5, y = 7.5, label = "COVID-19-Pandemie",size=3)+
scale_fill_manual(values=c("#009ee3","#9dc041"))+
xlab("Jahr")+
ylab("Anzahl an Sportveranstaltungen")+
theme_bw()+
theme(legend.position = "top")+
guides(fill=guide_legend(title=""))
ggpubr::ggarrange(p1,p2,nrow=2)
ggpubr::ggarrange(p1,p2,nrow=1)
ggpubr::ggarrange(p1,p2,nrow=1,common.legend = TRUE)
p2<-ggplot(d,aes(x=Year,fill=Type,group=Type))+
geom_bar()+
annotate("text", x = 2020.5, y = 7.5, label = "COVID-19\nPandemie",size=3)+
scale_fill_manual(values=c("#009ee3","#9dc041"))+
xlab("Jahr")+
ylab("Anzahl an Sportveranstaltungen")+
theme_bw()+
theme(legend.position = "top")+
guides(fill=guide_legend(title=""))
ggpubr::ggarrange(p1,p2,nrow=1,common.legend = TRUE)
p2<-ggplot(d,aes(x=Year,fill=Type,group=Type))+
geom_bar()+
annotate("rect", x = 2020.5, y = 7.5, label = "COVID-19\nPandemie",size=3)+
scale_fill_manual(values=c("#009ee3","#9dc041"))+
xlab("Jahr")+
ylab("Anzahl an Sportveranstaltungen")+
theme_bw()+
theme(legend.position = "top")+
guides(fill=guide_legend(title=""))
ggpubr::ggarrange(p1,p2,nrow=1,common.legend = TRUE)
p2<-ggplot(d,aes(x=Year,fill=Type,group=Type))+
geom_bar()+
annotate("text", x = 2020.5, y = 7.5, label = "COVID-19\nPandemie",size=3)+
scale_fill_manual(values=c("#009ee3","#9dc041"))+
xlab("Jahr")+
ylab("Anzahl an Sportveranstaltungen")+
theme_bw()+
theme(legend.position = "top")+
guides(fill=guide_legend(title=""))
ggpubr::ggarrange(p1,p2,nrow=1,common.legend = TRUE)
d|>
mutate(Datum = lubridate::ymd(paste0(Year,"-",Month,"-",Day)))|>
rename(Ort=address,
Veranstaltung=Type)|>
select(Datum,Ort,Veranstaltung)|>
arrange(Datum)|>
reactable(pagination=TRUE,sortable = TRUE,filterable=TRUE,
groupBy = Veranstaltung)
d|>
mutate(Datum = lubridate::ymd(paste0(Year,"-",Month,"-",Day)))|>
rename(Ort=address,
Veranstaltung=Type)|>
select(Datum,Ort,Veranstaltung)|>
arrange(Datum)|>
reactable(pagination=TRUE,sortable = TRUE,filterable=TRUE,
groupBy = "Veranstaltung")
d|>
mutate(Datum = lubridate::ymd(paste0(Year,"-",Month,"-",Day)))|>
rename(Ort=address,
Veranstaltung=Type)|>
select(Datum,Ort,Veranstaltung)|>
arrange(Datum)|>
reactable(pagination=TRUE,
searchable = TRUE,
sortable = TRUE,
#  filterable=TRUE,
groupBy = "Veranstaltung")
d|>
mutate(Datum = lubridate::ymd(paste0(Year,"-",Month,"-",Day)))|>
rename(Ort=address,
Veranstaltung=Type)|>
select(Datum,Ort,Veranstaltung)|>
arrange(Datum)|>
reactable(pagination=TRUE,
searchable = TRUE,
sortable = TRUE,
#  filterable=TRUE,
groupBy = c("Veranstaltung","Datum"))
d|>
mutate(Datum = lubridate::ymd(paste0(Year,"-",Month,"-",Day)))|>
rename(Ort=address,
Veranstaltung=Type)|>
select(Datum,Ort,Veranstaltung)|>
arrange(Datum)|>
reactable(pagination=TRUE,
searchable = TRUE,
sortable = TRUE,
#  filterable=TRUE,
groupBy = c("Veranstaltung","Ort"))
d|>
mutate(Datum = lubridate::ymd(paste0(Year,"-",Month,"-",Day)))|>
rename(Ort=address,
Jahr = Year,
Veranstaltung=Type)|>
select(Datum,Ort,Veranstaltung,Jahr)|>
arrange(Datum)|>
reactable(pagination=TRUE,
searchable = TRUE,
sortable = TRUE,
#  filterable=TRUE,
groupBy = c("Veranstaltung","Ort"))
d|>
mutate(Datum = lubridate::ymd(paste0(Year,"-",Month,"-",Day)))|>
rename(Ort=address,
Jahr = Year,
Veranstaltung=Type)|>
select(Datum,Ort,Veranstaltung,Jahr)|>
arrange(Datum)|>
reactable(pagination=TRUE,
searchable = TRUE,
sortable = TRUE,
#  filterable=TRUE,
groupBy = c("Jahr","Veranstaltung","Ort"))
d|>
mutate(Datum = lubridate::ymd(paste0(Year,"-",Month,"-",Day)))|>
rename(Ort=address,
Jahr = Year,
Veranstaltung=Type)|>
select(Datum,Ort,Veranstaltung,Jahr)|>
arrange(Datum)|>
reactable(pagination=TRUE,
searchable = TRUE,
sortable = TRUE,
#  filterable=TRUE,
groupBy = c("Jahr"))
d|>
mutate(Datum = lubridate::ymd(paste0(Year,"-",Month,"-",Day)))|>
rename(Ort=address,
Jahr = Year,
Veranstaltung=Type)|>
select(Datum,Ort,Veranstaltung,Jahr)|>
# arrange(Datum)|>
reactable(pagination=TRUE,
searchable = TRUE,
sortable = TRUE,
#  filterable=TRUE,
groupBy = c("Jahr"))
d|>
mutate(Datum = lubridate::ymd(paste0(Year,"-",Month,"-",Day)))|>
rename(Ort=address,
Jahr = Year,
Veranstaltung=Type)|>
select(Datum,Ort,Veranstaltung,Jahr)|>
arrange(Jahr)|>
reactable(pagination=TRUE,
searchable = TRUE,
sortable = TRUE,
#  filterable=TRUE,
groupBy = c("Jahr"))
d|>
mutate(Datum = lubridate::ymd(paste0(Year,"-",Month,"-",Day)))|>
rename(Ort=address,
Jahr = Year,
Veranstaltung=Type)|>
mutate(Jahr = trimws(Jahr))
d|>
mutate(Datum = lubridate::ymd(paste0(Year,"-",Month,"-",Day)))|>
rename(Ort=address,
Jahr = Year,
Veranstaltung=Type)|>
mutate(Jahr = trimws(Jahr))|>
select(Datum,Ort,Veranstaltung,Jahr)|>
arrange(Jahr)|>
reactable(pagination=TRUE,
searchable = TRUE,
sortable = TRUE,
#  filterable=TRUE,
groupBy = c("Jahr"))
d|>
mutate(Datum = lubridate::ymd(paste0(Year,"-",Month,"-",Day)))|>
rename(Ort=address,
Jahr = Year,
Veranstaltung=Type)|>
mutate(Jahr = trimws(Jahr))|>
select(Datum,Ort,Veranstaltung,Jahr)|>
arrange(Jahr,Datum)|>
reactable(pagination=TRUE,
searchable = TRUE,
sortable = TRUE,
#  filterable=TRUE,
groupBy = c("Jahr"))
p1<-ggplot(ts_geo) +
geom_sf(data=kreise_th,fill="white", )+
geom_sf(size = 2,
aes(color=Veranstaltung),
show.legend = FALSE
#  color="#469cdd" # blau
#  color="#d22c4a"
#
) +
# theme(legend.position = "bottom")+
scale_color_manual(values=c("#009ee3","#9dc041"))+
facet_wrap(vars(Year),nrow=2)+
theme_void()
p2<-ggplot(d,aes(x=Year,fill=Type,group=Type))+
geom_bar()+
annotate("text", x = 2020.5, y = 7.5, label = "COVID-19\nPandemie",size=3)+
scale_fill_manual(values=c("#009ee3","#9dc041"))+
xlab("Jahr")+
ylab("Anzahl an Sportveranstaltungen")+
theme_bw()+
theme(legend.position = "top")+
guides(fill=guide_legend(title=""))
ggpubr::ggarrange(p1,p2,nrow=1,common.legend = TRUE)
install.packages("quarto")
