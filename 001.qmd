---
title: "Teilnehmer"
date: "Stand: 2024-05-05"
editor_options: 
  chunk_output_type: console
---

```{r, setup, include=FALSE}
knitr::opts_chunk$set(echo=FALSE)
library(tidyverse)
library(dplyr)
library(kableExtra)
library(readxl)
library(sf)
library(leaflet)
library(leaflet.extras)
library(leafpop)
library(htmlwidgets)
library(webshot)
library(readxl)
```




# Entwicklung der erfassten Teilnehmerzahlen pro Schuljahresdurchlauf (Stand Mai 2023)


```{r results='hide'}
d <- readxl::read_excel("./data/bekigeki_Urdaten_bis_2022-2023-05-05.xlsx")

# Wie oft kein geburtstag angegeben?
d|>
  group_by(cohort)|>
  summarise(NoBirthdate = sum(is.na(Birthdate)),
            NoSex = sum(is.na(Sex)),
            NoTest = sum(is.na(BPT) & 
                           is.na(OLB) & 
                           is.na(Star) & 
                           is.na(Run) & 
                           is.na(S20) & 
                           is.na(SLJ)))

d <- d |> 
  filter(!(is.na(BPT) & 
                           is.na(OLB) & 
                           is.na(Star) & 
                           is.na(Run) & 
                           is.na(S20) & 
                           is.na(SLJ)))

# Kreise Deutschlandweit
kreise <- sf::st_read("./data/sg.geodatenzentrum.de/2023-01-24/vg5000_12-31.utm32s.shape.ebenen/vg5000_ebenen_1231/VG5000_KRS.shp")

# Kreise Thueringen
kreise_th <- subset(kreise, grepl("^16",as.character(kreise$ARS)))
#plot(kreise_th$geometry)
kreise_th_t<- st_transform(kreise_th$geometry, crs = "+proj=longlat +datum=WGS84")


# teilnehmende Schulen
ts <- d |> 
  group_by(cohort,Name,School,lat,lon) |> 
  dplyr::summarize(Schülerzahl = n(),.groups="drop")|> 
  rename("Jahr" = "cohort",
         "Schulnummer" = "School",
         "Schulname" = "Name")|>
  ungroup()

ts|>  
  select(-lon,-lat)|>  
  reactable::reactable(
    groupBy = c('Jahr'),
    defaultPageSize = 50,
    #filterable = TRUE
    searchable = TRUE
    )
# reactablefmtr::add_title(paste0(
#as.character(length(unique(ts$Schulnummer))), " unterschiedliche #Schulen insgesamt im Datensatz (Stand ",Sys.Date(),")")) 
#d|> filter(cohort==2017)|>
#  group_by(cohort,Name,School)|>
#  summarise(n = length(unique(School)))|>
#  select(-Name,School)|>
#  ungroup()
 
```


- `r paste0(as.character(length(unique(ts$Schulnummer))), " unterschiedliche Schulen insgesamt im Datensatz (Stand ",Sys.Date(),")")`

- Wiederholer ("Sitzenbleiber") nicht erfasst


```{r}

color <- "#009ee3" #0078b4"

 p1<-ts|>
  group_by(Jahr) |>
  summarise(n = n())|>
  ggplot(aes(x=as.factor(Jahr),
             y=n))+
   ggtitle("Schulen")+
  geom_bar(stat="identity",fill=color)+
  geom_label(aes(
    label=format(n,
                 big.mark=".",
                 decimal.mark=",")), 
    vjust=.5, 
    color="black",
    position = position_dodge(0.9), size=3)+
  ylab("Anzahl")+
   labs(subtitle = " ")+
  xlab("Jahr")+
  theme_bw() 
 


 p2<-ts|>
  group_by(Jahr) |>
  summarise(n = sum(Schülerzahl))|>
  ggplot(aes(x=as.factor(Jahr),
             y=n))+
  geom_bar(stat="identity",fill=color)+
  geom_label(aes(
    label=format(n,
                 big.mark=".",
                 decimal.mark=",")), 
    vjust=.5, 
    color="black",
    position = position_dodge(0.9), size=3)+
  ylab("Anzahl")+
   xlab("Jahr")+
   ggtitle("Schülerinnen und Schüler")+
   labs(subtitle = "(mit mind. einem Motorik-Testergebnis)")+
   geom_label(aes(x=as.factor(2019),y=10000,
                  label=paste("Gesamtzahl: ",format(sum(n),big.mark=".",decimal.mark=","))))+
   theme_bw() 
 
 ggpubr::ggarrange(p1,p2,nrow=1)
```



```{r,eval=TRUE}
ts_geo<- st_as_sf(ts, 
                 coords = c("lon", "lat"),
                 crs = 4326,
                 agr = "constant"
                 )

ggplot(ts_geo) + 
 geom_sf(data=kreise_th,fill="white")+
   geom_sf(size = .3,  
           color="#469cdd" # blau
         #  color="#d22c4a"
           
           ) +
  facet_wrap(vars(Jahr),nrow=2)+
  theme_void()

# ggpubr::ggarrange(p1,p2)

```

```{r,eval=FALSE}
library(gganimate)
p1<-ggplot(ts_geo) + 
 geom_sf(data=kreise_th,fill="white")+
   geom_sf(size = .3,  
           color="#469cdd" # blau
         #  color="#d22c4a"
           
           ) +
  transition_time(as.numeric(Jahr))+
  labs(title="Jahr: {frame_time}")+
 # facet_wrap(vars(Jahr),nrow=2)+
  theme_void()
  
  animate(p1, nframes = 6, duration = 12) ### nframes = is the number of frames/images we want (here, one by year = 10 years) /  duration is the duration of the gif, here 15 secondes
```


# Updates 
+ 2023-05-05: Aktualisierung der Abbildung nach Eintreffen weiterer Datensätze, Ausschluss von Datensätzen die kein einziges Motorik-Testergebnis enthalten (trotz Vorhandensein von z.B. Geschlechts- oder Geburtstagsangabe)
+ 2023-04-24: Aktualisierung der Abbildung nach Eintreffen weiterer Datensätze
+ 2023-03-09: Erstellen der Seite

