{"title":"Versuch einer Klassifikation (in Bearbeitung)","markdown":{"yaml":{"title":"Versuch einer Klassifikation (in Bearbeitung)","subtitle":"Stand 2023-05-05","lang":"de","date":"`r format(Sys.Date(), \"%B %d, %Y\")`","editor_options":{"chunk_output_type":"console"}},"headingText":"Setup and data","headingAttr":{"id":"","classes":["hidden","unlisted"],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n```{r, echo=FALSE,results=FALSE}\nknitr::opts_chunk$set(echo=FALSE,cache=FALSE,results=FALSE)\n```\n\n\n\n\n```{r}\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(kableExtra)\nlibrary(readxl)\nlibrary(sf)\nlibrary(leaflet)\nlibrary(leaflet.extras)\nlibrary(leafpop)\nlibrary(htmlwidgets)\nlibrary(webshot)\nlibrary(readxl)\nlibrary(reactable)\nd <- readxl::read_excel(\"./data/bekigeki_Urdaten_bis_2022-2023-05-05.xlsx\") \n```\n\n## Long data\n```{r}\nComponent <- c(\"Star\",\"Run\",\"S20\",\"BPT\",\"SLJ\",\"OLB\")\n\nd_long <- d |> \n  pivot_longer(cols=Component,\n               names_to = \"Component\",\n               values_to = \"score\")|>\n  mutate(score = as.numeric(score),\n        # change 0 values to NA\n        score = ifelse(score==0,NA,score))|>\n  dplyr::select(-dateiname) |>\n  # zScore based on all years\n  group_by(Sex, Component) |> \n  mutate(zScore_All  = scale(score),\n         q_Upper_All = quantile(score,.80,na.rm=TRUE),\n         q_Lower_All = quantile(score,.20,na.rm=TRUE))|>  \n  # zScore per Year\n  group_by(Sex, Component, cohort) |> \n  mutate(zScore_Cohort  = scale(score),\n         q_Upper_Cohort = quantile(score,.80,na.rm=TRUE),\n         q_Lower_Cohort = quantile(score,.20,na.rm=TRUE))# |> \n  \n \n\nd_summary <- d_long |> \n  group_by(Child,Sex) |>\n  summarise(\n    # count upper quantiles\n    qLowerAll = \n      sum((score <= q_Lower_All & (Component!=\"S20\" | Component != \"Star\")) | \n            (score >= q_Upper_All & (Component==\"S20\" | Component == \"Star\")),na.rm=TRUE),\n    qUpperAll = \n      sum((score >= q_Upper_All & (Component!=\"S20\" | Component != \"Star\")) |\n            (score <= q_Lower_All & (Component==\"S20\" | Component == \"Star\")),na.rm=TRUE),\n    qLowerCohort = \n      sum((score <= q_Lower_Cohort & (Component!=\"S20\" | Component != \"Star\")) |\n            (score >= q_Upper_Cohort & (Component==\"S20\" | Component == \"Star\")),na.rm=TRUE),\n    qUpperCohort = \n      sum((score >= q_Upper_Cohort & (Component!=\"S20\" | Component != \"Star\")) |\n            (score <= q_Lower_Cohort & (Component==\"S20\" | Component == \"Star\")),na.rm=TRUE),\n    qAll = qUpperAll - qLowerAll,\n    qCohort = qUpperCohort - qLowerCohort,\n    Absence = sum(is.na(zScore_All)))|>\n  dplyr::filter(Sex == \"m\" | Sex == \"w\")|>\n  mutate(\n    Fitness_q_All = ifelse(Absence<4,\n                           ifelse(qAll <=-2,\"F\",\n                                  ifelse(qAll>=2,\"T\",\n                                         ifelse(qAll<2 & qAll>-2,\"N\",NA))),NA),\n    Fitness_q_Cohort = ifelse(Absence<4,\n                              ifelse(qCohort <=-2,\"F\",\n                                     ifelse(qCohort>=2,\"T\",\n                                            ifelse(-qCohort<2 & qCohort>-2,\"N\",NA))),NA),\n    Fitness_q_Cohort_T6 = ifelse(Absence<4,\n                                 ifelse(qCohort <=-2,\"F\",\n                                        ifelse(qCohort>=2 & Absence ==0 ,\"T\",\n                                               ifelse((-qCohort<2 & qCohort>-2) | qCohort>=2 & Absence !=0,\"N\",NA))),NA))\n\n\nr1 <- d_summary |> \n  merge(d[,c(\"Child\",\"cohort\")])|> \n  pivot_longer(cols = c(\n                        Fitness_q_All,\n                        Fitness_q_Cohort,\n                        Fitness_q_Cohort_T6),\n               names_to = \"Norm\",values_to = \"Result\")|>\n  group_by(Norm,Result,cohort)|>\n  summarize(Number = n())|>\n  pivot_wider(names_from=Norm,values_from = c(Number))|>\n  t() |> as.data.frame()\nr1\n\n\n\n\nd_wide <- d_long |>\n#  rename(District = Kreis)|>\n  pivot_wider(id_cols = c(Child,Sex,cohort,\n                          School,Name,District,\n                          lat,lon,\n                          AGS,\n                          Sport,Club,\n                          club_1,club_2,club_3,\n                          Inclusion),\n              names_from = Component,\n              values_from = c(\"score\")) |>\n  merge(d_summary) \n```\n\n```{r}\n \nt1 <- d_wide |> \n  filter(!is.na(Sport))|>\n  filter(!is.na(Club))|>\n  group_by(cohort,District,School,Name,Sex,Club,Sport) |>\n  summarise(Gesamtzahl = n(),\n            `auswertbar` = sum(\n              (Sex==\"m\" | Sex == \"w\") & \n                Absence < 4 & \n                !is.na(Sport) &\n                !is.na(Club) & \n                !is.na(Fitness_q_Cohort)),\n            T = sum(Fitness_q_Cohort ==\"T\",na.rm=TRUE),\n            F = sum(Fitness_q_Cohort ==\"F\",na.rm=TRUE),\n            N = sum(Fitness_q_Cohort ==\"N\",na.rm=TRUE)\n            ) |>\n  mutate(T_rel = round(T/auswertbar*100),\n         F_rel = round(F/auswertbar*100),\n         N_rel = round(N/auswertbar*100)\n         # check_rel = T_rel + F_rel + N_rel,\n         # check = T + F + N - auswertbar\n         )|>\n  ungroup()\nwith_tooltip2 <- function(value, tooltip) {\n  tags$abbr(style = \"text-decoration: underline; text-decoration-style: dotted; cursor: help\",\n            title = tooltip,value)\n}\n\nlibrary(tippy)\nwith_tooltip <- function(value, tooltip, ...) {\n  div(style = \"text-decoration: underline; text-decoration-style: dotted; cursor: help\",\n      tippy(value, tooltip, ...))\n}\n```\n\n### Tables\n\n#### Filter definitions\n```{r}\n# Render a bar chart in the background of the cell\nbar_style <- function(width = 1, fill = \"#e6e6e6\", height = \"75%\",\n                      align = c(\"left\", \"right\"), color = NULL) {\n  align <- match.arg(align)\n  if (align == \"left\") {\n    position <- paste0(width * 100, \"%\")\n    image <- sprintf(\"linear-gradient(90deg, %1$s %2$s, transparent %2$s)\", fill, position)\n  } else {\n    position <- paste0(100 - width * 100, \"%\")\n    image <- sprintf(\"linear-gradient(90deg, transparent %1$s, %2$s %1$s)\", position, fill)\n  }\n  list(\n    backgroundImage = image,\n    backgroundSize = paste(\"100%\", height),\n    backgroundRepeat = \"no-repeat\",\n    backgroundPosition = \"center\",\n    color = color\n  )\n}\n\nbar_chart <- function(label, width = \"100%\", height = \"1rem\", fill = \"#00bfc4\", background = NULL) {\n  bar <- div(style = list(background = fill, width = width, height = height))\n  chart <- div(style = list(height = height,flexGrow = 1, marginLeft = \"0rem\",marginRight = \"0.5rem\", background = background), bar)\n # div(style = list(display = \"flex\", alignItems = \"left\"), label, chart)\ndiv(div(style = list(display = \"flex\", \n                 align = \"right\"), paste0(label,\" %\")),div(style = list(display = \"flex\", \n                 alignItems = \"center\"),chart))\n\n}\n# Source: https://glin.github.io/reactable/articles/custom-filtering.html\n# 2022-03-23\n# Custom range input filter with label and value\nrangeFilter1 <- function(tableId, columnId, label, min, max, value = NULL, step = NULL, width = \"200px\") {\n  value <- if (!is.null(value)) value else min\n  inputId <- sprintf(\"filter_%s_%s\", tableId, columnId)\n  valueId <- sprintf(\"filter_%s_%s__value\", tableId, columnId)\n  oninput <- paste(\n    sprintf(\"document.getElementById('%s').textContent = this.value;\", valueId),\n    sprintf(\"Reactable.setFilter('%s', '%s', this.value)\", tableId, columnId)\n  )\n  \n  div(\n    tags$label(`for` = inputId, label),\n    div(\n      style = sprintf(\"display: flex; align-items: center; width: %s\", validateCssUnit(width)),\n      tags$input(\n        id = inputId,\n        type = \"range\",\n        min = min,\n        max = max,\n        step = step,\n        value = value,\n        oninput = oninput,\n        onchange = oninput, # For IE11 support\n        style = \"width: 100%;\"\n      ),\n      span(id = valueId, style = \"margin-left: 8px;\", value)\n    )\n  )\n}\n\n# Source: https://glin.github.io/reactable/articles/custom-filtering.html\nrangeFilter2 <- function(values, name) {\n        tags$select(\n          # Set to undefined to clear the filter\n          onchange = sprintf(\"Reactable.setFilter('cars-select', '%s', event.target.value || undefined)\", name),\n          # \"All\" has an empty value to clear the filter, and is the default option\n          tags$option(value = \"\", \"Alle\"),\n          lapply(unique(values), tags$option),\n          \"aria-label\" = sprintf(\"Filter %s\", name),\n          style = \"width: 100%; height: 28px;\"\n        )\n}\n\n# Custom range input filter with label and value\nrangeFilter <- function(tableId, columnId, label, min, max, value = NULL, step = NULL, width = \"200px\") {\n  value <- if (!is.null(value)) value else min\n  inputId <- sprintf(\"filter_%s_%s\", tableId, columnId)\n  valueId <- sprintf(\"filter_%s_%s__value\", tableId, columnId)\n  oninput <- paste(\n    sprintf(\"document.getElementById('%s').textContent = this.value;\", valueId),\n    sprintf(\"Reactable.setFilter('%s', '%s', this.value)\", tableId, columnId)\n  )\n  \n  div(\n    tags$label(`for` = inputId, label),\n    div(\n      style = sprintf(\"display: flex; align-items: center; width: %s\", validateCssUnit(width)),\n      tags$input(\n        id = inputId,\n        type = \"range\",\n        min = min,\n        max = max,\n        step = step,\n        value = value,\n        oninput = oninput,\n        onchange = oninput, # For IE11 support\n        style = \"width: 100%;\"\n      ),\n      span(id = valueId, style = \"margin-left: 8px;\", value)\n    )\n  )\n}\n\n# Filter method that filters numeric columns by minimum value\nfilterMinValue <- JS(\"function(rows, columnId, filterValue) {\n  return rows.filter(function(row) {\n    return row.values[columnId] >= filterValue\n  })\n}\")\n# Filter method that filters numeric columns by minimum value\nfilterMinValue <- JS(\"function(rows, columnId, filterValue) {\n  return rows.filter(function(row) {\n    return row.values[columnId] >= filterValue\n  })\n}\")\n\n# Source: https://github.com/glin/reactable/blob/HEAD/vignettes/popular-movies/popular-movies.Rmd\n# 2023-03-23\nselect_filter <- function(id, label, shared_data, group, choices = NULL,\n                          width = \"100%\", class = \"filter-input\") {\n  values <- shared_data$data()[[group]]\n  keys <- shared_data$key()\n  if (is.list(values)) {\n    # Multiple values per row\n    flat_keys <- unlist(mapply(rep, keys, sapply(values, length)))\n    keys_by_value <- split(flat_keys, unlist(values), drop = TRUE)\n    choices <- if (is.null(choices)) sort(unique(unlist(values))) else choices\n  } else {\n    # Single value per row\n    keys_by_value <- split(seq_along(keys), values, drop = TRUE)\n    choices <- if (is.null(choices)) sort(unique(values)) else choices\n  }\n\n  script <- sprintf(\"\n    window['__ct__%s'] = (function() {\n      const handle = new window.crosstalk.FilterHandle('%s')\n      const keys = %s\n      return {\n        filter: function(value) {\n          if (!value) {\n            handle.clear()\n          } else {\n            handle.set(keys[value])\n          }\n        }\n      }\n    })()\n  \", id, shared_data$groupName(), toJSON(keys_by_value))\n\n  div(\n    class = class,\n    tags$label(`for` = id, label),\n    tags$select(\n      id = id,\n      onchange = sprintf(\"window['__ct__%s'].filter(this.value)\", id),\n      style = sprintf(\"width: %s\", validateCssUnit(width)),\n      tags$option(value = \"\", \"Alle\"),\n      lapply(choices, function(value) tags$option(value = value, value))\n    ),\n    tags$script(HTML(script))\n  )\n}\n\n# https://glin.github.io/reactable/articles/custom-filtering.html\n# 2023-02-23\n# Creates a data list column filter for a table with the given ID\ndataListFilter <- function(tableId, style = \"width: 100%; height: 28px;\") {\n  function(values, name) {\n    dataListId <- sprintf(\"%s-%s-list\", tableId, name)\n    tagList(\n      tags$input(\n        type = \"text\",\n        list = dataListId,\n        oninput = sprintf(\"Reactable.setFilter('%s', '%s', event.target.value || undefined)\", tableId, name),\n        \"aria-label\" = sprintf(\"Filter %s\", name),\n        style = style\n      ),\n      tags$datalist(\n        id = dataListId,\n        lapply(unique(values), function(value) tags$option(value = value))\n      )\n    )\n  }\n}\n\n```\n\n### Shared HTML Table\n```{r}\nlibrary(crosstalk)\n# shared table\nt2 <- t1 |> select(-Gesamtzahl,-T_rel,-F_rel,-N_rel)\nshared_data <- SharedData$new(t2)\n\n# styles\nsticky_style <- list(backgroundColor = \"#f7f7f7\")\nsticky_style_r <- list(borderTop = \"0px solid #eee\",borderLeft = \"0px solid #eee\",borderRight = \"0px solid #eee\")\n\nrotate_header_style<- list(\n          `white-space` = \"nowrap\",\n          `transform-origin` = \"0% 50%\",\n           transform = \"rotate(-90deg)\",\n          `margin-top` = \"10px\",\n          `margin-bottom` = \"10px\",\n           borderColor = \"#ffffff\"\n        )\nsmall_header_style <- list(`font-size` =  \"10px\")\nsticky_style_l <- list(borderLeft = \"0px solid #eee\")\n\nlibrary(htmltools)\n# reactable\ntbl<-reactable(\n  shared_data,\n  defaultColDef = colDef(\n  #  headerStyle = sticky_style_r,\n    align = \"right\",\n    footerStyle = list(fontWeight = \"bold\"),\n    #   maxWidth = 120,\n    vAlign=\"top\"),\n  searchable = TRUE,\n  resizable = TRUE,\n  wrap = TRUE,\n  pagination=TRUE,\n  # paginationType = \"jump\", \n  defaultPageSize = 10,\n  showSortable = TRUE,\n  bordered = FALSE,\n  compact=TRUE,\n  # details = function(index) {\n  #t1$Name[index]},\n  #  onClick = \"select\",\n  height = 800,\n  #  width=600,\n  # defaultPageSize = 20,\n  striped = TRUE,\n  #elementId = \"cars-vis-table\",\n  elementId = \"cars-grouping-table\",\n  highlight = TRUE,\n  \n  filterable = FALSE,\n  groupBy = c(\"cohort\"),\n  columns = list(\n    Sport = colDef(name = \"Sport-AG\",\n                   align=\"left\",\n                   width=70,\n                   headerStyle = small_header_style,\n                   filterable = FALSE),\n    cohort = colDef(name = \"Jahr\",\n                    align=\"left\",\n                    minWidth=60,\n                    headerStyle = small_header_style,\n                    filterable = FALSE),\n    Sex = colDef(name=\"Geschlecht\",\n                 align=\"left\",\n                 width=70,\n                 sortable = FALSE,\n                 #  width = 50,\n                      headerStyle = small_header_style,\n                 filterable=FALSE),\n    Club = colDef(name=\"Verein\",\n                  sortable = FALSE,\n                  filterable=FALSE,\n                  width=60,\n                      headerStyle = small_header_style,\n                  align=\"left\"),\n    Name = colDef(name = \"Schule\",\n                  sortable = TRUE,\n                  show=TRUE,\n                  minWidth = 100,\n                  align=\"left\",\n                  headerStyle = small_header_style,\n                  #style = \"font-weight: 100\",\n                  # Show species under character names\n                  cell = function(value, index) {\n                    School<- t1$School[index]\n                    School <- if (!is.na(School)) School else \"Unknown\"\n                    div(\n                      div(style = \"font-weight: 100\", value),\n                      div(style = \"font-size: 0.75rem\", School)\n                    )\n                  }),\n    School = colDef(show=FALSE,\n                    minWidth = 100,\n                    headerStyle = small_header_style,\n                    sortable = TRUE), #Schulnummer\n    #  School = colDef(show=FALSE),\n    District = colDef(name=\"Kreis\",\n                      minWidth = 80,\n                      headerStyle = small_header_style,\n                      show=TRUE,align=\"left\",sortable = TRUE),\n    # Gesamtzahl= colDef(name=\"N\",\n    #                    width=90,\n    #                    align = \"right\",\n    #           aggregate = \"sum\",\n    #           html=TRUE,\n    #         \n    #        #   footer = function(values) \n    #         #    sprintf(\"&#x2211; %.0f\", \n    #          #           #sum(shared_data$Gesamtzahl)\n    #           #           sum(values)\n    #                     \n    #            #         )\n    #               footer = JS(\"function(colInfo) {\n    #     var total = 0\n    #     colInfo.data.forEach(function(row) {\n    #       total += row['Gesamtzahl']\n    #     })\n    #     return '&#x2211; ' + total.toFixed(0)\n    #   }\")\n    #           ),\n    auswertbar= colDef(name=\"N<sub>a</sub>\",\n                       html=TRUE,\n                       width=90,\n                       headerStyle = small_header_style,\n                       header = with_tooltip(\"Gesamtzahl <div style=\\\"font-size: 10px; font-weight:normal\\\"> (Anzahl auswertbar)</div>\",\"vollständig auswertbare Datensätze für diese Darstellungsform (Teilnahme an mind. 4 Testaufgaben, Information zu Geschlecht, Verein UND Sport-AG vorhanden)\"),\n                       align = \"right\",\n                       sticky = \"right\",\n                       aggregate = \"sum\",\n                       #   footer = function(values) \n                       #    sprintf(\"&#x2211; %.0f\", sum(values))\n                       #https://github.com/glin/reactable/issues/78\n                       footer = JS(\"function(colInfo) {\n        var total = 0\n        colInfo.data.forEach(function(row) {\n          total += row['auswertbar']\n        })\n        return '&#x2211; ' + total.toFixed(0)\n      }\")\n    ),\n    T= colDef(align = \"right\",\n              name=\"positiv\",\n              html=TRUE,\n              width=80,\n              headerStyle = small_header_style,\n              header = with_tooltip(\"positiv <div style=\\\"font-size: 10px; font-weight:normal\\\"> (Anzahl)</div>\",\"'Potentielle Talente:' Anzahl an Schülerinnen und Schülern, die an mindestens vier Motorik-Tests teilnahmen UND mindestens zweimal öfter Testergebnisse im oberen Quintil als im unteren Quintil in Bezug auf die Gesamtstichprobe aus Thüringen für das jeweilige Jahr und Geschlecht erzielten.\"),\n              aggregate = \"sum\",\n              #  footer = function(values) \n              #     sprintf(\"%.0f\", sum(values))\n              footer = JS(\"function(colInfo) {\n        var total = 0\n        colInfo.data.forEach(function(row) {\n          total += row['T']\n        })\n        return '&#x2211; ' + total.toFixed(0)\n      }\")\n    ),\n    F= colDef(align = \"right\",\n              name=\"negativ\",\n              html=TRUE,\n              headerStyle = small_header_style,\n              header = with_tooltip(\"negativ <div style=\\\"font-size: 10px; font-weight:normal\\\"> (Anzahl)</div>\",\"'Eventueller Förderbedarf:' Anzahl an Schülerinnen und Schülern, die an mindestens vier Motorik-Tests teilnahmen UND die mindestens zweimal öfter Testergebnisse im unteren Quintil als im oberen Quintil in Bezug auf die Gesamtstichprobe aus Thüringen für das jeweilige Jahr und Geschlecht erzielten.\"),\n              width=60,\n              aggregate = \"sum\",\n              #  footer = function(values) \n              #     sprintf(\"%.0f\", sum(values))\n              footer = JS(\"function(colInfo) {\n        var total = 0\n        colInfo.data.forEach(function(row) {\n          total += row['F']\n        })\n        return '&#x2211; ' + total.toFixed(0)\n      }\")\n    ),\n    N= colDef(align = \"right\",\n              name=\"unauffällig\",\n              html=TRUE,\n              headerStyle = small_header_style,\n              sticky = \"right\",\n             \n              header = with_tooltip(\"unauffällig <div style=\\\"font-size: 10px; font-weight:normal\\\"> (Anzahl)</div>\",\"'Erwartungsgemäß:' Anzahl an Schülerinnen und Schülern, die an mindestens vier Motorik-Tests teilnahmen UND für die NICHT die anderen beiden Bedingungen zutreffen (siehe Tooltips).\"),\n              width=70,\n              aggregate = \"sum\",\n              #  footer = function(values) \n              #     sprintf(\"%.0f\", sum(values))\n              footer = JS(\"function(colInfo) {\n        var total = 0\n        colInfo.data.forEach(function(row) {\n          total += row['N']\n        })\n        return '&#x2211; ' + total.toFixed(0)\n      }\")\n            )),\ncolumnGroups = list(\n  colGroup(\n  name = \"motorisch auffällig\", \n  sticky = \"right\",\n           columns = c(\n                       \"T\",\"F\"))\n  # colGroup(name = \"Gesamtzahl\", \n  #          sticky=\"left\",\n  #          columns = c(\"Gesamtzahl\", \n  #                      \"auswertbar\"))\n  \n ))\n \n\nlibrary(jsonlite)\n```\n\n# Interaktive Tabelle\n\n- in Bearbeitung, Erläuterung erfolgt in Kürze\n\n\n```{r, results=TRUE}\n# browsable shared table\nbrowsable(\n  div(\"Filter: \",\n # class = \"movies\",\n  style=\"font-weight: bold\",\n  div(#style=\"display: flex\",\n    style=\"font-weight: normal; display: grid; grid-template-columns: 1fr 3fr 1fr 1fr; gap: 10px;\",\n    class = \"filters\",\n  #  search_filter(\"filter_title\", \"Search titles\", shared_movies, \"title\"),\n    select_filter(\"filter_cohort\", \"Jahr\", shared_data, \"cohort\"),\n    select_filter(\"filter_genres\", \"Kreis\", shared_data, \"District\"),\n  select_filter(\"filter_sex\", \"Geschlecht\", shared_data, \"Sex\"),\n  br(),\n  select_filter(\"filter_sport\", \"Sport-AG\", shared_data, \"Sport\"),\n   select_filter(\"filter_club\", \"Vereinsmitgliedschaft\", shared_data, \"Club\")\n  ),\nbr(),\n  tagList(\n    div(tags$label(\"Gruppierung\", `for` = \"cars-grouping-select\")),\n    tags$select(\n      id = \"cars-grouping-select\",\n    onchange = \"Reactable.setGroupBy('cars-grouping-table', this.value ? [this.value] : [])\",\n  # onchange = \"Reactable.setGroupBy('cars-grouping-table', ['cohort', 'District'])\"\n      tags$option(\"Keine\", value = \"\"),\n      tags$option(\"Jahr\", value = \"cohort\"),\n       tags$option(\"Kreis\", value = \"District\"),\n       tags$option(\"Geschlecht\", value = \"Sex\"),\n       tags$option(\"Schule\", value = \"Name\"),\n  tags$option(\"Sport-AG\", value = \"Sport\"),\n      tags$option(\"Vereinsmitgliedschaft\", value = \"Club\"),\n      #lapply(c( \"Kreis\", \"Sex\",\"Name\"), tags$option)\n    ),\n    \n  \n #   tags$hr(\"aria-hidden\" = \"true\"),\n#tags$hr(),\ndiv(style=\"font-weight: normal;font-size: 0.6em\",\n  tbl))\n))\n```\n\n\n# Updates \n+ 2023-04-25: Anpassung Spalten der Tabelle (Entfernen der Barcharts Prozentangaben)\n+ 2023-04-24: Erstellen der Seite\n","srcMarkdownNoYaml":"\n\n```{r, echo=FALSE,results=FALSE}\nknitr::opts_chunk$set(echo=FALSE,cache=FALSE,results=FALSE)\n```\n\n\n# Setup and data {.hidden .unlisted}\n\n\n```{r}\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(kableExtra)\nlibrary(readxl)\nlibrary(sf)\nlibrary(leaflet)\nlibrary(leaflet.extras)\nlibrary(leafpop)\nlibrary(htmlwidgets)\nlibrary(webshot)\nlibrary(readxl)\nlibrary(reactable)\nd <- readxl::read_excel(\"./data/bekigeki_Urdaten_bis_2022-2023-05-05.xlsx\") \n```\n\n## Long data\n```{r}\nComponent <- c(\"Star\",\"Run\",\"S20\",\"BPT\",\"SLJ\",\"OLB\")\n\nd_long <- d |> \n  pivot_longer(cols=Component,\n               names_to = \"Component\",\n               values_to = \"score\")|>\n  mutate(score = as.numeric(score),\n        # change 0 values to NA\n        score = ifelse(score==0,NA,score))|>\n  dplyr::select(-dateiname) |>\n  # zScore based on all years\n  group_by(Sex, Component) |> \n  mutate(zScore_All  = scale(score),\n         q_Upper_All = quantile(score,.80,na.rm=TRUE),\n         q_Lower_All = quantile(score,.20,na.rm=TRUE))|>  \n  # zScore per Year\n  group_by(Sex, Component, cohort) |> \n  mutate(zScore_Cohort  = scale(score),\n         q_Upper_Cohort = quantile(score,.80,na.rm=TRUE),\n         q_Lower_Cohort = quantile(score,.20,na.rm=TRUE))# |> \n  \n \n\nd_summary <- d_long |> \n  group_by(Child,Sex) |>\n  summarise(\n    # count upper quantiles\n    qLowerAll = \n      sum((score <= q_Lower_All & (Component!=\"S20\" | Component != \"Star\")) | \n            (score >= q_Upper_All & (Component==\"S20\" | Component == \"Star\")),na.rm=TRUE),\n    qUpperAll = \n      sum((score >= q_Upper_All & (Component!=\"S20\" | Component != \"Star\")) |\n            (score <= q_Lower_All & (Component==\"S20\" | Component == \"Star\")),na.rm=TRUE),\n    qLowerCohort = \n      sum((score <= q_Lower_Cohort & (Component!=\"S20\" | Component != \"Star\")) |\n            (score >= q_Upper_Cohort & (Component==\"S20\" | Component == \"Star\")),na.rm=TRUE),\n    qUpperCohort = \n      sum((score >= q_Upper_Cohort & (Component!=\"S20\" | Component != \"Star\")) |\n            (score <= q_Lower_Cohort & (Component==\"S20\" | Component == \"Star\")),na.rm=TRUE),\n    qAll = qUpperAll - qLowerAll,\n    qCohort = qUpperCohort - qLowerCohort,\n    Absence = sum(is.na(zScore_All)))|>\n  dplyr::filter(Sex == \"m\" | Sex == \"w\")|>\n  mutate(\n    Fitness_q_All = ifelse(Absence<4,\n                           ifelse(qAll <=-2,\"F\",\n                                  ifelse(qAll>=2,\"T\",\n                                         ifelse(qAll<2 & qAll>-2,\"N\",NA))),NA),\n    Fitness_q_Cohort = ifelse(Absence<4,\n                              ifelse(qCohort <=-2,\"F\",\n                                     ifelse(qCohort>=2,\"T\",\n                                            ifelse(-qCohort<2 & qCohort>-2,\"N\",NA))),NA),\n    Fitness_q_Cohort_T6 = ifelse(Absence<4,\n                                 ifelse(qCohort <=-2,\"F\",\n                                        ifelse(qCohort>=2 & Absence ==0 ,\"T\",\n                                               ifelse((-qCohort<2 & qCohort>-2) | qCohort>=2 & Absence !=0,\"N\",NA))),NA))\n\n\nr1 <- d_summary |> \n  merge(d[,c(\"Child\",\"cohort\")])|> \n  pivot_longer(cols = c(\n                        Fitness_q_All,\n                        Fitness_q_Cohort,\n                        Fitness_q_Cohort_T6),\n               names_to = \"Norm\",values_to = \"Result\")|>\n  group_by(Norm,Result,cohort)|>\n  summarize(Number = n())|>\n  pivot_wider(names_from=Norm,values_from = c(Number))|>\n  t() |> as.data.frame()\nr1\n\n\n\n\nd_wide <- d_long |>\n#  rename(District = Kreis)|>\n  pivot_wider(id_cols = c(Child,Sex,cohort,\n                          School,Name,District,\n                          lat,lon,\n                          AGS,\n                          Sport,Club,\n                          club_1,club_2,club_3,\n                          Inclusion),\n              names_from = Component,\n              values_from = c(\"score\")) |>\n  merge(d_summary) \n```\n\n```{r}\n \nt1 <- d_wide |> \n  filter(!is.na(Sport))|>\n  filter(!is.na(Club))|>\n  group_by(cohort,District,School,Name,Sex,Club,Sport) |>\n  summarise(Gesamtzahl = n(),\n            `auswertbar` = sum(\n              (Sex==\"m\" | Sex == \"w\") & \n                Absence < 4 & \n                !is.na(Sport) &\n                !is.na(Club) & \n                !is.na(Fitness_q_Cohort)),\n            T = sum(Fitness_q_Cohort ==\"T\",na.rm=TRUE),\n            F = sum(Fitness_q_Cohort ==\"F\",na.rm=TRUE),\n            N = sum(Fitness_q_Cohort ==\"N\",na.rm=TRUE)\n            ) |>\n  mutate(T_rel = round(T/auswertbar*100),\n         F_rel = round(F/auswertbar*100),\n         N_rel = round(N/auswertbar*100)\n         # check_rel = T_rel + F_rel + N_rel,\n         # check = T + F + N - auswertbar\n         )|>\n  ungroup()\nwith_tooltip2 <- function(value, tooltip) {\n  tags$abbr(style = \"text-decoration: underline; text-decoration-style: dotted; cursor: help\",\n            title = tooltip,value)\n}\n\nlibrary(tippy)\nwith_tooltip <- function(value, tooltip, ...) {\n  div(style = \"text-decoration: underline; text-decoration-style: dotted; cursor: help\",\n      tippy(value, tooltip, ...))\n}\n```\n\n### Tables\n\n#### Filter definitions\n```{r}\n# Render a bar chart in the background of the cell\nbar_style <- function(width = 1, fill = \"#e6e6e6\", height = \"75%\",\n                      align = c(\"left\", \"right\"), color = NULL) {\n  align <- match.arg(align)\n  if (align == \"left\") {\n    position <- paste0(width * 100, \"%\")\n    image <- sprintf(\"linear-gradient(90deg, %1$s %2$s, transparent %2$s)\", fill, position)\n  } else {\n    position <- paste0(100 - width * 100, \"%\")\n    image <- sprintf(\"linear-gradient(90deg, transparent %1$s, %2$s %1$s)\", position, fill)\n  }\n  list(\n    backgroundImage = image,\n    backgroundSize = paste(\"100%\", height),\n    backgroundRepeat = \"no-repeat\",\n    backgroundPosition = \"center\",\n    color = color\n  )\n}\n\nbar_chart <- function(label, width = \"100%\", height = \"1rem\", fill = \"#00bfc4\", background = NULL) {\n  bar <- div(style = list(background = fill, width = width, height = height))\n  chart <- div(style = list(height = height,flexGrow = 1, marginLeft = \"0rem\",marginRight = \"0.5rem\", background = background), bar)\n # div(style = list(display = \"flex\", alignItems = \"left\"), label, chart)\ndiv(div(style = list(display = \"flex\", \n                 align = \"right\"), paste0(label,\" %\")),div(style = list(display = \"flex\", \n                 alignItems = \"center\"),chart))\n\n}\n# Source: https://glin.github.io/reactable/articles/custom-filtering.html\n# 2022-03-23\n# Custom range input filter with label and value\nrangeFilter1 <- function(tableId, columnId, label, min, max, value = NULL, step = NULL, width = \"200px\") {\n  value <- if (!is.null(value)) value else min\n  inputId <- sprintf(\"filter_%s_%s\", tableId, columnId)\n  valueId <- sprintf(\"filter_%s_%s__value\", tableId, columnId)\n  oninput <- paste(\n    sprintf(\"document.getElementById('%s').textContent = this.value;\", valueId),\n    sprintf(\"Reactable.setFilter('%s', '%s', this.value)\", tableId, columnId)\n  )\n  \n  div(\n    tags$label(`for` = inputId, label),\n    div(\n      style = sprintf(\"display: flex; align-items: center; width: %s\", validateCssUnit(width)),\n      tags$input(\n        id = inputId,\n        type = \"range\",\n        min = min,\n        max = max,\n        step = step,\n        value = value,\n        oninput = oninput,\n        onchange = oninput, # For IE11 support\n        style = \"width: 100%;\"\n      ),\n      span(id = valueId, style = \"margin-left: 8px;\", value)\n    )\n  )\n}\n\n# Source: https://glin.github.io/reactable/articles/custom-filtering.html\nrangeFilter2 <- function(values, name) {\n        tags$select(\n          # Set to undefined to clear the filter\n          onchange = sprintf(\"Reactable.setFilter('cars-select', '%s', event.target.value || undefined)\", name),\n          # \"All\" has an empty value to clear the filter, and is the default option\n          tags$option(value = \"\", \"Alle\"),\n          lapply(unique(values), tags$option),\n          \"aria-label\" = sprintf(\"Filter %s\", name),\n          style = \"width: 100%; height: 28px;\"\n        )\n}\n\n# Custom range input filter with label and value\nrangeFilter <- function(tableId, columnId, label, min, max, value = NULL, step = NULL, width = \"200px\") {\n  value <- if (!is.null(value)) value else min\n  inputId <- sprintf(\"filter_%s_%s\", tableId, columnId)\n  valueId <- sprintf(\"filter_%s_%s__value\", tableId, columnId)\n  oninput <- paste(\n    sprintf(\"document.getElementById('%s').textContent = this.value;\", valueId),\n    sprintf(\"Reactable.setFilter('%s', '%s', this.value)\", tableId, columnId)\n  )\n  \n  div(\n    tags$label(`for` = inputId, label),\n    div(\n      style = sprintf(\"display: flex; align-items: center; width: %s\", validateCssUnit(width)),\n      tags$input(\n        id = inputId,\n        type = \"range\",\n        min = min,\n        max = max,\n        step = step,\n        value = value,\n        oninput = oninput,\n        onchange = oninput, # For IE11 support\n        style = \"width: 100%;\"\n      ),\n      span(id = valueId, style = \"margin-left: 8px;\", value)\n    )\n  )\n}\n\n# Filter method that filters numeric columns by minimum value\nfilterMinValue <- JS(\"function(rows, columnId, filterValue) {\n  return rows.filter(function(row) {\n    return row.values[columnId] >= filterValue\n  })\n}\")\n# Filter method that filters numeric columns by minimum value\nfilterMinValue <- JS(\"function(rows, columnId, filterValue) {\n  return rows.filter(function(row) {\n    return row.values[columnId] >= filterValue\n  })\n}\")\n\n# Source: https://github.com/glin/reactable/blob/HEAD/vignettes/popular-movies/popular-movies.Rmd\n# 2023-03-23\nselect_filter <- function(id, label, shared_data, group, choices = NULL,\n                          width = \"100%\", class = \"filter-input\") {\n  values <- shared_data$data()[[group]]\n  keys <- shared_data$key()\n  if (is.list(values)) {\n    # Multiple values per row\n    flat_keys <- unlist(mapply(rep, keys, sapply(values, length)))\n    keys_by_value <- split(flat_keys, unlist(values), drop = TRUE)\n    choices <- if (is.null(choices)) sort(unique(unlist(values))) else choices\n  } else {\n    # Single value per row\n    keys_by_value <- split(seq_along(keys), values, drop = TRUE)\n    choices <- if (is.null(choices)) sort(unique(values)) else choices\n  }\n\n  script <- sprintf(\"\n    window['__ct__%s'] = (function() {\n      const handle = new window.crosstalk.FilterHandle('%s')\n      const keys = %s\n      return {\n        filter: function(value) {\n          if (!value) {\n            handle.clear()\n          } else {\n            handle.set(keys[value])\n          }\n        }\n      }\n    })()\n  \", id, shared_data$groupName(), toJSON(keys_by_value))\n\n  div(\n    class = class,\n    tags$label(`for` = id, label),\n    tags$select(\n      id = id,\n      onchange = sprintf(\"window['__ct__%s'].filter(this.value)\", id),\n      style = sprintf(\"width: %s\", validateCssUnit(width)),\n      tags$option(value = \"\", \"Alle\"),\n      lapply(choices, function(value) tags$option(value = value, value))\n    ),\n    tags$script(HTML(script))\n  )\n}\n\n# https://glin.github.io/reactable/articles/custom-filtering.html\n# 2023-02-23\n# Creates a data list column filter for a table with the given ID\ndataListFilter <- function(tableId, style = \"width: 100%; height: 28px;\") {\n  function(values, name) {\n    dataListId <- sprintf(\"%s-%s-list\", tableId, name)\n    tagList(\n      tags$input(\n        type = \"text\",\n        list = dataListId,\n        oninput = sprintf(\"Reactable.setFilter('%s', '%s', event.target.value || undefined)\", tableId, name),\n        \"aria-label\" = sprintf(\"Filter %s\", name),\n        style = style\n      ),\n      tags$datalist(\n        id = dataListId,\n        lapply(unique(values), function(value) tags$option(value = value))\n      )\n    )\n  }\n}\n\n```\n\n### Shared HTML Table\n```{r}\nlibrary(crosstalk)\n# shared table\nt2 <- t1 |> select(-Gesamtzahl,-T_rel,-F_rel,-N_rel)\nshared_data <- SharedData$new(t2)\n\n# styles\nsticky_style <- list(backgroundColor = \"#f7f7f7\")\nsticky_style_r <- list(borderTop = \"0px solid #eee\",borderLeft = \"0px solid #eee\",borderRight = \"0px solid #eee\")\n\nrotate_header_style<- list(\n          `white-space` = \"nowrap\",\n          `transform-origin` = \"0% 50%\",\n           transform = \"rotate(-90deg)\",\n          `margin-top` = \"10px\",\n          `margin-bottom` = \"10px\",\n           borderColor = \"#ffffff\"\n        )\nsmall_header_style <- list(`font-size` =  \"10px\")\nsticky_style_l <- list(borderLeft = \"0px solid #eee\")\n\nlibrary(htmltools)\n# reactable\ntbl<-reactable(\n  shared_data,\n  defaultColDef = colDef(\n  #  headerStyle = sticky_style_r,\n    align = \"right\",\n    footerStyle = list(fontWeight = \"bold\"),\n    #   maxWidth = 120,\n    vAlign=\"top\"),\n  searchable = TRUE,\n  resizable = TRUE,\n  wrap = TRUE,\n  pagination=TRUE,\n  # paginationType = \"jump\", \n  defaultPageSize = 10,\n  showSortable = TRUE,\n  bordered = FALSE,\n  compact=TRUE,\n  # details = function(index) {\n  #t1$Name[index]},\n  #  onClick = \"select\",\n  height = 800,\n  #  width=600,\n  # defaultPageSize = 20,\n  striped = TRUE,\n  #elementId = \"cars-vis-table\",\n  elementId = \"cars-grouping-table\",\n  highlight = TRUE,\n  \n  filterable = FALSE,\n  groupBy = c(\"cohort\"),\n  columns = list(\n    Sport = colDef(name = \"Sport-AG\",\n                   align=\"left\",\n                   width=70,\n                   headerStyle = small_header_style,\n                   filterable = FALSE),\n    cohort = colDef(name = \"Jahr\",\n                    align=\"left\",\n                    minWidth=60,\n                    headerStyle = small_header_style,\n                    filterable = FALSE),\n    Sex = colDef(name=\"Geschlecht\",\n                 align=\"left\",\n                 width=70,\n                 sortable = FALSE,\n                 #  width = 50,\n                      headerStyle = small_header_style,\n                 filterable=FALSE),\n    Club = colDef(name=\"Verein\",\n                  sortable = FALSE,\n                  filterable=FALSE,\n                  width=60,\n                      headerStyle = small_header_style,\n                  align=\"left\"),\n    Name = colDef(name = \"Schule\",\n                  sortable = TRUE,\n                  show=TRUE,\n                  minWidth = 100,\n                  align=\"left\",\n                  headerStyle = small_header_style,\n                  #style = \"font-weight: 100\",\n                  # Show species under character names\n                  cell = function(value, index) {\n                    School<- t1$School[index]\n                    School <- if (!is.na(School)) School else \"Unknown\"\n                    div(\n                      div(style = \"font-weight: 100\", value),\n                      div(style = \"font-size: 0.75rem\", School)\n                    )\n                  }),\n    School = colDef(show=FALSE,\n                    minWidth = 100,\n                    headerStyle = small_header_style,\n                    sortable = TRUE), #Schulnummer\n    #  School = colDef(show=FALSE),\n    District = colDef(name=\"Kreis\",\n                      minWidth = 80,\n                      headerStyle = small_header_style,\n                      show=TRUE,align=\"left\",sortable = TRUE),\n    # Gesamtzahl= colDef(name=\"N\",\n    #                    width=90,\n    #                    align = \"right\",\n    #           aggregate = \"sum\",\n    #           html=TRUE,\n    #         \n    #        #   footer = function(values) \n    #         #    sprintf(\"&#x2211; %.0f\", \n    #          #           #sum(shared_data$Gesamtzahl)\n    #           #           sum(values)\n    #                     \n    #            #         )\n    #               footer = JS(\"function(colInfo) {\n    #     var total = 0\n    #     colInfo.data.forEach(function(row) {\n    #       total += row['Gesamtzahl']\n    #     })\n    #     return '&#x2211; ' + total.toFixed(0)\n    #   }\")\n    #           ),\n    auswertbar= colDef(name=\"N<sub>a</sub>\",\n                       html=TRUE,\n                       width=90,\n                       headerStyle = small_header_style,\n                       header = with_tooltip(\"Gesamtzahl <div style=\\\"font-size: 10px; font-weight:normal\\\"> (Anzahl auswertbar)</div>\",\"vollständig auswertbare Datensätze für diese Darstellungsform (Teilnahme an mind. 4 Testaufgaben, Information zu Geschlecht, Verein UND Sport-AG vorhanden)\"),\n                       align = \"right\",\n                       sticky = \"right\",\n                       aggregate = \"sum\",\n                       #   footer = function(values) \n                       #    sprintf(\"&#x2211; %.0f\", sum(values))\n                       #https://github.com/glin/reactable/issues/78\n                       footer = JS(\"function(colInfo) {\n        var total = 0\n        colInfo.data.forEach(function(row) {\n          total += row['auswertbar']\n        })\n        return '&#x2211; ' + total.toFixed(0)\n      }\")\n    ),\n    T= colDef(align = \"right\",\n              name=\"positiv\",\n              html=TRUE,\n              width=80,\n              headerStyle = small_header_style,\n              header = with_tooltip(\"positiv <div style=\\\"font-size: 10px; font-weight:normal\\\"> (Anzahl)</div>\",\"'Potentielle Talente:' Anzahl an Schülerinnen und Schülern, die an mindestens vier Motorik-Tests teilnahmen UND mindestens zweimal öfter Testergebnisse im oberen Quintil als im unteren Quintil in Bezug auf die Gesamtstichprobe aus Thüringen für das jeweilige Jahr und Geschlecht erzielten.\"),\n              aggregate = \"sum\",\n              #  footer = function(values) \n              #     sprintf(\"%.0f\", sum(values))\n              footer = JS(\"function(colInfo) {\n        var total = 0\n        colInfo.data.forEach(function(row) {\n          total += row['T']\n        })\n        return '&#x2211; ' + total.toFixed(0)\n      }\")\n    ),\n    F= colDef(align = \"right\",\n              name=\"negativ\",\n              html=TRUE,\n              headerStyle = small_header_style,\n              header = with_tooltip(\"negativ <div style=\\\"font-size: 10px; font-weight:normal\\\"> (Anzahl)</div>\",\"'Eventueller Förderbedarf:' Anzahl an Schülerinnen und Schülern, die an mindestens vier Motorik-Tests teilnahmen UND die mindestens zweimal öfter Testergebnisse im unteren Quintil als im oberen Quintil in Bezug auf die Gesamtstichprobe aus Thüringen für das jeweilige Jahr und Geschlecht erzielten.\"),\n              width=60,\n              aggregate = \"sum\",\n              #  footer = function(values) \n              #     sprintf(\"%.0f\", sum(values))\n              footer = JS(\"function(colInfo) {\n        var total = 0\n        colInfo.data.forEach(function(row) {\n          total += row['F']\n        })\n        return '&#x2211; ' + total.toFixed(0)\n      }\")\n    ),\n    N= colDef(align = \"right\",\n              name=\"unauffällig\",\n              html=TRUE,\n              headerStyle = small_header_style,\n              sticky = \"right\",\n             \n              header = with_tooltip(\"unauffällig <div style=\\\"font-size: 10px; font-weight:normal\\\"> (Anzahl)</div>\",\"'Erwartungsgemäß:' Anzahl an Schülerinnen und Schülern, die an mindestens vier Motorik-Tests teilnahmen UND für die NICHT die anderen beiden Bedingungen zutreffen (siehe Tooltips).\"),\n              width=70,\n              aggregate = \"sum\",\n              #  footer = function(values) \n              #     sprintf(\"%.0f\", sum(values))\n              footer = JS(\"function(colInfo) {\n        var total = 0\n        colInfo.data.forEach(function(row) {\n          total += row['N']\n        })\n        return '&#x2211; ' + total.toFixed(0)\n      }\")\n            )),\ncolumnGroups = list(\n  colGroup(\n  name = \"motorisch auffällig\", \n  sticky = \"right\",\n           columns = c(\n                       \"T\",\"F\"))\n  # colGroup(name = \"Gesamtzahl\", \n  #          sticky=\"left\",\n  #          columns = c(\"Gesamtzahl\", \n  #                      \"auswertbar\"))\n  \n ))\n \n\nlibrary(jsonlite)\n```\n\n# Interaktive Tabelle\n\n- in Bearbeitung, Erläuterung erfolgt in Kürze\n\n\n```{r, results=TRUE}\n# browsable shared table\nbrowsable(\n  div(\"Filter: \",\n # class = \"movies\",\n  style=\"font-weight: bold\",\n  div(#style=\"display: flex\",\n    style=\"font-weight: normal; display: grid; grid-template-columns: 1fr 3fr 1fr 1fr; gap: 10px;\",\n    class = \"filters\",\n  #  search_filter(\"filter_title\", \"Search titles\", shared_movies, \"title\"),\n    select_filter(\"filter_cohort\", \"Jahr\", shared_data, \"cohort\"),\n    select_filter(\"filter_genres\", \"Kreis\", shared_data, \"District\"),\n  select_filter(\"filter_sex\", \"Geschlecht\", shared_data, \"Sex\"),\n  br(),\n  select_filter(\"filter_sport\", \"Sport-AG\", shared_data, \"Sport\"),\n   select_filter(\"filter_club\", \"Vereinsmitgliedschaft\", shared_data, \"Club\")\n  ),\nbr(),\n  tagList(\n    div(tags$label(\"Gruppierung\", `for` = \"cars-grouping-select\")),\n    tags$select(\n      id = \"cars-grouping-select\",\n    onchange = \"Reactable.setGroupBy('cars-grouping-table', this.value ? [this.value] : [])\",\n  # onchange = \"Reactable.setGroupBy('cars-grouping-table', ['cohort', 'District'])\"\n      tags$option(\"Keine\", value = \"\"),\n      tags$option(\"Jahr\", value = \"cohort\"),\n       tags$option(\"Kreis\", value = \"District\"),\n       tags$option(\"Geschlecht\", value = \"Sex\"),\n       tags$option(\"Schule\", value = \"Name\"),\n  tags$option(\"Sport-AG\", value = \"Sport\"),\n      tags$option(\"Vereinsmitgliedschaft\", value = \"Club\"),\n      #lapply(c( \"Kreis\", \"Sex\",\"Name\"), tags$option)\n    ),\n    \n  \n #   tags$hr(\"aria-hidden\" = \"true\"),\n#tags$hr(),\ndiv(style=\"font-weight: normal;font-size: 0.6em\",\n  tbl))\n))\n```\n\n\n# Updates \n+ 2023-04-25: Anpassung Spalten der Tabelle (Entfernen der Barcharts Prozentangaben)\n+ 2023-04-24: Erstellen der Seite\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"002.html"},"language":{"toc-title-document":"Inhaltsverzeichnis","toc-title-website":"Auf dieser Seite","related-formats-title":"Andere Formate","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Quelle","section-title-abstract":"Zusammenfassung","section-title-appendices":"Anhang","section-title-footnotes":"Fußnoten","section-title-references":"Literatur","section-title-reuse":"Wiederverwendung","section-title-copyright":"Urheberrechte","section-title-citation":"Zitat","appendix-attribution-cite-as":"Bitte zitieren Sie diese Arbeit als:","appendix-attribution-bibtex":"Mit BibTeX zitieren:","title-block-author-single":"Autor:in","title-block-author-plural":"Autor:innen","title-block-affiliation-single":"Zugehörigkeit","title-block-affiliation-plural":"Zugehörigkeiten","title-block-published":"Veröffentlichungsdatum","title-block-modified":"Geändert","callout-tip-title":"Tipp","callout-note-title":"Hinweis","callout-warning-title":"Warnung","callout-important-title":"Wichtig","callout-caution-title":"Vorsicht","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Gesamten Code zeigen","code-tools-hide-all-code":"Gesamten Code verbergen","code-tools-view-source":"Quellcode anzeigen","code-tools-source-code":"Quellcode","code-line":"Zeile","code-lines":"Zeilen","copy-button-tooltip":"In die Zwischenablage kopieren","copy-button-tooltip-success":"Kopiert","repo-action-links-edit":"Seite editieren","repo-action-links-source":"Quellcode anzeigen","repo-action-links-issue":"Problem melden","back-to-top":"Zurück nach oben","search-no-results-text":"Keine Treffer","search-matching-documents-text":"Treffer","search-copy-link-title":"Link in die Suche kopieren","search-hide-matches-text":"Zusätzliche Treffer verbergen","search-more-match-text":"weitere Treffer in diesem Dokument","search-more-matches-text":"weitere Treffer in diesem Dokument","search-clear-button-title":"Zurücksetzen","search-detached-cancel-button-title":"Abbrechen","search-submit-button-title":"Abschicken","search":"Suchen","toggle-section":"Abschnitt umschalten","toggle-sidebar":"Seitenleiste umschalten","toggle-dark-mode":"Dunkelmodus umschalten","toggle-reader-mode":"Lesemodus umschalten","toggle-navigation":"Navigation umschalten","crossref-fig-title":"Abbildung","crossref-tbl-title":"Tabelle","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Korollar","crossref-prp-title":"Aussage","crossref-cnj-title":"Annahme","crossref-def-title":"Definition","crossref-exm-title":"Beispiel","crossref-exr-title":"Übungsaufgabe","crossref-ch-prefix":"Kapitel","crossref-apx-prefix":"Anhang","crossref-sec-prefix":"Kapitel","crossref-eq-prefix":"Gleichung","crossref-lof-title":"Abbildungsverzeichnis","crossref-lot-title":"Tabellenverzeichnis","crossref-lol-title":"Listingverzeichnis","environment-proof-title":"Beweis","environment-remark-title":"Anmerkung","environment-solution-title":"Lösung","listing-page-order-by":"Sortieren nach","listing-page-order-by-default":"Voreinstellung","listing-page-order-by-date-asc":"Datum (aufsteigend)","listing-page-order-by-date-desc":"Neueste","listing-page-order-by-number-desc":"Absteigend","listing-page-order-by-number-asc":"Aufsteigend","listing-page-field-date":"Datum","listing-page-field-title":"Titel","listing-page-field-description":"Beschreibung","listing-page-field-author":"Autor:in","listing-page-field-filename":"Dateiname","listing-page-field-filemodified":"Geändert","listing-page-field-subtitle":"Untertitel","listing-page-field-readingtime":"Lesezeit","listing-page-field-categories":"Kategorien","listing-page-minutes-compact":"{0} min","listing-page-category-all":"alle","listing-page-no-matches":"Keine Treffer"},"metadata":{"lang":"de","fig-responsive":true,"quarto-version":"1.3.340","theme":"cosmo","title":"Versuch einer Klassifikation (in Bearbeitung)","subtitle":"Stand 2023-05-05","date":"`r format(Sys.Date(), \"%B %d, %Y\")`","editor_options":{"chunk_output_type":"console"}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}