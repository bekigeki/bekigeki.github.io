[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Überblick",
    "section": "",
    "text": "Die Punkte auf der Karte zeigen die Standorte der Schulen mit Grundschulklassen in Thüringen. Die blauen verdeutlichen die Schulen, die mindestens einmal in den Jahren von 2017 bis 2023 am Bewegungscheck des Programms “BEWEGTE KINDER = GESÜNDERE KINDER” (BeKiGeKi) der dritten Klassen in Thüringen teilnahmen.\n\n\n\n\n\n\n\n\n\n\nDatengrundlage\n\n\nSchuladressen, -nummern und -namen: https://www.schulportal-thueringen.de/schools (Stand 24. April 2023\nGeocoding: Cambon J, Hernangómez D, Belanger C, Possenriede D (2021). tidygeocoder: An R package for geocoding. Journal of Open Source Software, 6(65), 3544, https://doi.org/10.21105/joss.03544 (R package version 1.0.5 with ArcGIS Method)\nMessdaten im Excelformat von den Schulen, die am Programm “BEWEGTE KINDER=GESÜNDERE KINDER” (BeKiGeKi) teilnahmen\n\nAktualisierungen\n\n\n2024-02-28: Neuer Daten Schuljahr 2023/2024\n2023-08-25: Link to German Kids Fitness Lab\n2023-05-10: Abschnitt Datengrundlage hinzugefügt\n2023-04-24: Erstellen der Seite"
  },
  {
    "objectID": "001.html",
    "href": "001.html",
    "title": "Teilnehmerzahlen",
    "section": "",
    "text": "Abbildung 1: Bemerkung: Kinder, die ein Schuljahr in der dritten Klasse wiederholten, könnten möglichwerweiße in Einzelfällen im Folgejahr noch einmal am Bewegungs-Check teilgenommen haben. Da keine eindeutige Kennung pro Kind jahrgangsübergreifend vorliegt, kann demnach auch genaue Aussage zur Gesamtzahl der erfassten unterschiedlichen Kindern getroffen werden (nur zur Anzahl der erfassten Kindern pro Jahr bzw. Gesamtzahl an Bewegungs-Checks.)\n\n\n\n\n\n\n\n\n\n\n\nAktualisierungen\n\n\n2024-02-28: Neuer Daten Schuljahr 2023/2024, Korrektur -16 Schüler 2022 (Schulduplikat)\n2023-05-15: Zusammenfassung, Bemerkung zur Anzahl unterschiedlicher Kinder, Corona-Schutzmaßnahmen, frewillige/verpflichtende Teilnahme\n2023-05-05: Aktualisierung der Abbildung nach Eintreffen weiterer Datensätze, Ausschluss von Datensätzen die kein einziges Motorik-Testergebnis enthalten (trotz Vorhandensein von z.B. Geschlechts- oder Geburtstagsangabe)\n2023-04-24: Aktualisierung der Abbildung nach Eintreffen weiterer Datensätze\n2023-03-09: Erstellen der Seite\n\n\n\nWiederverwendunghttps://creativecommons.org/licenses/by/4.0/deed.deZitatBitte zitieren Sie diese Arbeit als:\nWöhrl, T., & Bähr, F. (2023, March 9). Teilnehmerzahlen. https://bekigeki.github.io/001.html"
  },
  {
    "objectID": "002.html",
    "href": "002.html",
    "title": "Thüringer Motorik-Klassifikation 2023",
    "section": "",
    "text": "library(tidyverse)\nlibrary(dplyr)\nlibrary(kableExtra)\nlibrary(readxl)\nlibrary(sf)\nlibrary(leaflet)\nlibrary(leaflet.extras)\nlibrary(leafpop)\nlibrary(htmlwidgets)\nlibrary(webshot)\nlibrary(readxl)\nlibrary(reactable)\nd &lt;- readxl::read_excel(\"./data/bekigeki_Urdaten_bis_2022-2023-05-24.xlsx\") \n\n\n\n\nComponent &lt;- c(\"Star\",\"Run\",\"S20\",\"BPT\",\"SLJ\",\"OLB\")\n\nd_long &lt;- d |&gt; \n  pivot_longer(cols=Component,\n               names_to = \"Component\",\n               values_to = \"score\")|&gt;\n  mutate(score = as.numeric(score),\n        # change 0 values to NA\n        score = ifelse(score==0,NA,score))|&gt;\n  dplyr::select(-dateiname) |&gt;\n  # zScore based on all years\n  group_by(Sex, Component) |&gt; \n  mutate(zScore_All  = scale(score),\n         q_Upper_All = quantile(score,.80,na.rm=TRUE),\n         q_Lower_All = quantile(score,.20,na.rm=TRUE),\n         upper_all =ifelse(Component == \"Star\" | Component == \"S20\",\n                              score &lt;= q_Lower_All,\n                              score &gt;= q_Upper_All),\n         lower_all =ifelse(Component == \"Star\" | Component == \"S20\",\n                              score &gt;= q_Upper_All,\n                              score &lt;= q_Lower_All))|&gt;  \n  # zScore per Year\n  ungroup()|&gt;\n  group_by(Sex, Component, cohort) |&gt; \n  mutate(zScore_Cohort  = scale(score),\n         q_Upper_Cohort = quantile(score,.80,na.rm=TRUE),\n         q_Lower_Cohort = quantile(score,.20,na.rm=TRUE),\n         upper_cohort =ifelse(Component == \"Star\" | Component == \"S20\",\n                              score &lt;= q_Lower_Cohort,\n                              score &gt;= q_Upper_Cohort),\n         lower_cohort =ifelse(Component == \"Star\" | Component == \"S20\",\n                              score &gt;= q_Upper_Cohort,\n                              score &lt;= q_Lower_Cohort)\n         )|&gt; \n  ungroup()\n\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %&gt;% select(Component)\n\n  # Now:\n  data %&gt;% select(all_of(Component))\n\nSee &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;.\n\nd_summary &lt;- d_long |&gt; \n  dplyr::filter(Sex == \"m\" | Sex == \"w\")|&gt;\n  group_by(Child,Sex) |&gt;\n  reframe(\n   # Component=Component,\n   #  zScore_All=zScore_All,\n    Absence = sum(is.na(zScore_All)),\n    qUpperAll = sum(upper_all,na.rm=TRUE),\n    qLowerAll = sum(lower_all,na.rm = TRUE),\n    qUpperCohort = sum(upper_cohort,na.rm=TRUE),\n    qLowerCohort = sum(lower_cohort,na.rm=TRUE))|&gt;\n  ungroup()|&gt;\n  mutate(qAll = qUpperAll - qLowerAll,\n         qCohort = qUpperCohort - qLowerCohort)|&gt;\n  mutate(\n    Fitness_q_All = ifelse(Absence&lt;4,\n                           ifelse(qAll &lt;=-2,\"F\",\n                                 ifelse(qAll&gt;=2,\"T\",\n                                         ifelse(qAll&lt;2 & qAll&gt;-2,\"N\",NA))),NA),\n    Fitness_q_Cohort = ifelse(Absence&lt;4,\n                              ifelse(qCohort &lt;=-3,\"F\",\n                                     ifelse(qCohort&gt;=3,\"T\",\n                                            ifelse(-qCohort&lt;3 & qCohort&gt;-3,\"N\",NA))),NA),\n    Fitness_q_Cohort_T6 = ifelse(Absence&lt;4,\n                                 ifelse(qCohort &lt;=-2,\"F\",\n                                        ifelse(qCohort&gt;=2 & Absence ==0 ,\"T\",\n                                               ifelse((-qCohort&lt;2 & qCohort&gt;-2) | qCohort&gt;=2 & Absence !=0,\"N\",NA))),NA))\n\n    # \n    # qLowerAll = \n    #   sum((score &lt;= q_Lower_All & (Component!=\"S20\" | Component != \"Star\")) | \n    #         (score &gt;= q_Upper_All & (Component==\"S20\" | Component == \"Star\")),na.rm=TRUE),\n    # qUpperAll = \n    #   sum((score &gt;= q_Upper_All & (Component!=\"S20\" | Component != \"Star\")) |\n    #         (score &lt;= q_Lower_All & (Component==\"S20\" | Component == \"Star\")),na.rm=TRUE),\n    # qLowerCohort = \n    #   sum(((score &lt;= q_Lower_Cohort & (Component!=\"S20\" | Component != \"Star\")) |\n    #         (score &gt;= q_Upper_Cohort & (Component==\"S20\" | Component == \"Star\"))),na.rm=TRUE),\n    # qUpperCohort = \n    #   sum(((score &gt;= q_Upper_Cohort & (Component!=\"S20\" | Component != \"Star\")) |\n    #         (score &lt;= q_Lower_Cohort & (Component==\"S20\" | Component == \"Star\"))),na.rm=TRUE),\n\n\nr1 &lt;- d_summary |&gt; \n  merge(d[,c(\"Child\",\"cohort\")])|&gt; \n  pivot_longer(cols = c(\n                        Fitness_q_All,\n                        Fitness_q_Cohort,\n                        Fitness_q_Cohort_T6),\n               names_to = \"Norm\",values_to = \"Result\")|&gt;\n  group_by(Norm,Result,cohort)|&gt;\n  summarize(Number = n())|&gt;\n  pivot_wider(names_from=Norm,values_from = c(Number))|&gt;\n  t() |&gt; as.data.frame()\n\n`summarise()` has grouped output by 'Norm', 'Result'. You can override using\nthe `.groups` argument.\n\nr1\n\n                      V1   V2   V3   V4   V5   V6   V7   V8   V9  V10  V11  V12\nResult                 F    F    F    F    F    F    N    N    N    N    N    N\ncohort              2017 2018 2019 2020 2021 2022 2017 2018 2019 2020 2021 2022\nFitness_q_All        368 1288 1647  681 1632 3831  787 2721 3139 1097 2771 6124\nFitness_q_Cohort     248  856 1053  352  895 1861 1162 3923 4604 1641 4085 9116\nFitness_q_Cohort_T6  423 1482 1869  628 1603 3331  827 2820 3197 1165 2811 6531\n                     V13  V14  V15  V16  V17  V18  V19  V20  V21\nResult                 T    T    T    T    T    T &lt;NA&gt; &lt;NA&gt; &lt;NA&gt;\ncohort              2017 2018 2019 2020 2021 2022 2017 2021 2022\nFitness_q_All        520 1611 1834  568 1501 2834   38    2   23\nFitness_q_Cohort     265  841  963  353  924 1812   38    2   23\nFitness_q_Cohort_T6  425 1318 1554  553 1490 2927   38    2   23\n\nd_wide &lt;- d_long |&gt;\n#  rename(District = Kreis)|&gt;\n  pivot_wider(id_cols = c(Child,Sex,cohort,\n                          School,Name,District,\n                          lat,lon,\n                          AGS,\n                          Sport,Club,\n                          club_1,club_2,club_3,\n                          Inclusion),\n              names_from = Component,\n              values_from = c(\"score\",\"q_Upper_Cohort\",\"q_Lower_Cohort\")) |&gt;\n  merge(d_summary) \n\n\nt1 &lt;- d_wide |&gt; \n  filter(!is.na(Sport))|&gt;\n  filter(!is.na(Club))|&gt;\n  group_by(cohort,District,School,Name,Sex,Club,Sport) |&gt;\n  summarise(Gesamtzahl = n(),\n            `auswertbar` = sum(\n              (Sex==\"m\" | Sex == \"w\") & \n                Absence &lt; 4 & \n                !is.na(Sport) &\n                !is.na(Club) & \n                !is.na(Fitness_q_Cohort)),\n            T = sum(Fitness_q_Cohort ==\"T\",na.rm=TRUE),\n            F = sum(Fitness_q_Cohort ==\"F\",na.rm=TRUE),\n            N = sum(Fitness_q_Cohort ==\"N\",na.rm=TRUE)\n            ) |&gt;\n  mutate(T_rel = round(T/auswertbar*100),\n         F_rel = round(F/auswertbar*100),\n         N_rel = round(N/auswertbar*100)\n         # check_rel = T_rel + F_rel + N_rel,\n         # check = T + F + N - auswertbar\n         )|&gt;\n  ungroup()\n\n`summarise()` has grouped output by 'cohort', 'District', 'School', 'Name',\n'Sex', 'Club'. You can override using the `.groups` argument.\n\nwith_tooltip2 &lt;- function(value, tooltip) {\n  tags$abbr(style = \"text-decoration: underline; text-decoration-style: dotted; cursor: help\",\n            title = tooltip,value)\n}\n\nlibrary(tippy)\nwith_tooltip &lt;- function(value, tooltip, ...) {\n  div(style = \"text-decoration: underline; text-decoration-style: dotted; cursor: help\",\n      tippy(value, tooltip, ...))\n}\n\n\n\n\n\n\n# Render a bar chart in the background of the cell\nbar_style &lt;- function(width = 1, fill = \"#e6e6e6\", height = \"75%\",\n                      align = c(\"left\", \"right\"), color = NULL) {\n  align &lt;- match.arg(align)\n  if (align == \"left\") {\n    position &lt;- paste0(width * 100, \"%\")\n    image &lt;- sprintf(\"linear-gradient(90deg, %1$s %2$s, transparent %2$s)\", fill, position)\n  } else {\n    position &lt;- paste0(100 - width * 100, \"%\")\n    image &lt;- sprintf(\"linear-gradient(90deg, transparent %1$s, %2$s %1$s)\", position, fill)\n  }\n  list(\n    backgroundImage = image,\n    backgroundSize = paste(\"100%\", height),\n    backgroundRepeat = \"no-repeat\",\n    backgroundPosition = \"center\",\n    color = color\n  )\n}\n\nbar_chart &lt;- function(label, width = \"100%\", height = \"1rem\", fill = \"#00bfc4\", background = NULL) {\n  bar &lt;- div(style = list(background = fill, width = width, height = height))\n  chart &lt;- div(style = list(height = height,flexGrow = 1, marginLeft = \"0rem\",marginRight = \"0.5rem\", background = background), bar)\n # div(style = list(display = \"flex\", alignItems = \"left\"), label, chart)\ndiv(div(style = list(display = \"flex\", \n                 align = \"right\"), paste0(label,\" %\")),div(style = list(display = \"flex\", \n                 alignItems = \"center\"),chart))\n\n}\n# Source: https://glin.github.io/reactable/articles/custom-filtering.html\n# 2022-03-23\n# Custom range input filter with label and value\nrangeFilter1 &lt;- function(tableId, columnId, label, min, max, value = NULL, step = NULL, width = \"200px\") {\n  value &lt;- if (!is.null(value)) value else min\n  inputId &lt;- sprintf(\"filter_%s_%s\", tableId, columnId)\n  valueId &lt;- sprintf(\"filter_%s_%s__value\", tableId, columnId)\n  oninput &lt;- paste(\n    sprintf(\"document.getElementById('%s').textContent = this.value;\", valueId),\n    sprintf(\"Reactable.setFilter('%s', '%s', this.value)\", tableId, columnId)\n  )\n  \n  div(\n    tags$label(`for` = inputId, label),\n    div(\n      style = sprintf(\"display: flex; align-items: center; width: %s\", validateCssUnit(width)),\n      tags$input(\n        id = inputId,\n        type = \"range\",\n        min = min,\n        max = max,\n        step = step,\n        value = value,\n        oninput = oninput,\n        onchange = oninput, # For IE11 support\n        style = \"width: 100%;\"\n      ),\n      span(id = valueId, style = \"margin-left: 8px;\", value)\n    )\n  )\n}\n\n# Source: https://glin.github.io/reactable/articles/custom-filtering.html\nrangeFilter2 &lt;- function(values, name) {\n        tags$select(\n          # Set to undefined to clear the filter\n          onchange = sprintf(\"Reactable.setFilter('cars-select', '%s', event.target.value || undefined)\", name),\n          # \"All\" has an empty value to clear the filter, and is the default option\n          tags$option(value = \"\", \"Alle\"),\n          lapply(unique(values), tags$option),\n          \"aria-label\" = sprintf(\"Filter %s\", name),\n          style = \"width: 100%; height: 28px;\"\n        )\n}\n\n# Custom range input filter with label and value\nrangeFilter &lt;- function(tableId, columnId, label, min, max, value = NULL, step = NULL, width = \"200px\") {\n  value &lt;- if (!is.null(value)) value else min\n  inputId &lt;- sprintf(\"filter_%s_%s\", tableId, columnId)\n  valueId &lt;- sprintf(\"filter_%s_%s__value\", tableId, columnId)\n  oninput &lt;- paste(\n    sprintf(\"document.getElementById('%s').textContent = this.value;\", valueId),\n    sprintf(\"Reactable.setFilter('%s', '%s', this.value)\", tableId, columnId)\n  )\n  \n  div(\n    tags$label(`for` = inputId, label),\n    div(\n      style = sprintf(\"display: flex; align-items: center; width: %s\", validateCssUnit(width)),\n      tags$input(\n        id = inputId,\n        type = \"range\",\n        min = min,\n        max = max,\n        step = step,\n        value = value,\n        oninput = oninput,\n        onchange = oninput, # For IE11 support\n        style = \"width: 100%;\"\n      ),\n      span(id = valueId, style = \"margin-left: 8px;\", value)\n    )\n  )\n}\n\n# Filter method that filters numeric columns by minimum value\nfilterMinValue &lt;- JS(\"function(rows, columnId, filterValue) {\n  return rows.filter(function(row) {\n    return row.values[columnId] &gt;= filterValue\n  })\n}\")\n# Filter method that filters numeric columns by minimum value\nfilterMinValue &lt;- JS(\"function(rows, columnId, filterValue) {\n  return rows.filter(function(row) {\n    return row.values[columnId] &gt;= filterValue\n  })\n}\")\n\n# Source: https://github.com/glin/reactable/blob/HEAD/vignettes/popular-movies/popular-movies.Rmd\n# 2023-03-23\nselect_filter &lt;- function(id, label, shared_data, group, choices = NULL,\n                          width = \"100%\", class = \"filter-input\") {\n  values &lt;- shared_data$data()[[group]]\n  keys &lt;- shared_data$key()\n  if (is.list(values)) {\n    # Multiple values per row\n    flat_keys &lt;- unlist(mapply(rep, keys, sapply(values, length)))\n    keys_by_value &lt;- split(flat_keys, unlist(values), drop = TRUE)\n    choices &lt;- if (is.null(choices)) sort(unique(unlist(values))) else choices\n  } else {\n    # Single value per row\n    keys_by_value &lt;- split(seq_along(keys), values, drop = TRUE)\n    choices &lt;- if (is.null(choices)) sort(unique(values)) else choices\n  }\n\n  script &lt;- sprintf(\"\n    window['__ct__%s'] = (function() {\n      const handle = new window.crosstalk.FilterHandle('%s')\n      const keys = %s\n      return {\n        filter: function(value) {\n          if (!value) {\n            handle.clear()\n          } else {\n            handle.set(keys[value])\n          }\n        }\n      }\n    })()\n  \", id, shared_data$groupName(), toJSON(keys_by_value))\n\n  div(\n    class = class,\n    tags$label(`for` = id, label),\n    tags$select(\n      id = id,\n      onchange = sprintf(\"window['__ct__%s'].filter(this.value)\", id),\n      style = sprintf(\"width: %s\", validateCssUnit(width)),\n      tags$option(value = \"\", \"Alle\"),\n      lapply(choices, function(value) tags$option(value = value, value))\n    ),\n    tags$script(HTML(script))\n  )\n}\n\n# https://glin.github.io/reactable/articles/custom-filtering.html\n# 2023-02-23\n# Creates a data list column filter for a table with the given ID\ndataListFilter &lt;- function(tableId, style = \"width: 100%; height: 28px;\") {\n  function(values, name) {\n    dataListId &lt;- sprintf(\"%s-%s-list\", tableId, name)\n    tagList(\n      tags$input(\n        type = \"text\",\n        list = dataListId,\n        oninput = sprintf(\"Reactable.setFilter('%s', '%s', event.target.value || undefined)\", tableId, name),\n        \"aria-label\" = sprintf(\"Filter %s\", name),\n        style = style\n      ),\n      tags$datalist(\n        id = dataListId,\n        lapply(unique(values), function(value) tags$option(value = value))\n      )\n    )\n  }\n}\n\n\n\n\n\n\nlibrary(crosstalk)\n# shared table\nt2 &lt;- t1 |&gt; select(-Gesamtzahl,-T_rel,-F_rel,-N_rel)\nshared_data &lt;- SharedData$new(t2)\n\n# styles\nsticky_style &lt;- list(backgroundColor = \"#f7f7f7\")\nsticky_style_r &lt;- list(borderTop = \"0px solid #eee\",borderLeft = \"0px solid #eee\",borderRight = \"0px solid #eee\")\n\nrotate_header_style&lt;- list(\n          `white-space` = \"nowrap\",\n          `transform-origin` = \"0% 50%\",\n           transform = \"rotate(-90deg)\",\n          `margin-top` = \"10px\",\n          `margin-bottom` = \"10px\",\n           borderColor = \"#ffffff\"\n        )\nsmall_header_style &lt;- list(`font-size` =  \"10px\")\nsticky_style_l &lt;- list(borderLeft = \"0px solid #eee\")\n\nlibrary(htmltools)\n# reactable\ntbl&lt;-reactable(\n  shared_data,\n  defaultColDef = colDef(\n  #  headerStyle = sticky_style_r,\n    align = \"right\",\n    footerStyle = list(fontWeight = \"bold\"),\n    #   maxWidth = 120,\n    vAlign=\"top\"),\n  searchable = TRUE,\n  resizable = TRUE,\n  wrap = TRUE,\n  pagination=TRUE,\n  paginateSubRows = TRUE,\n  # paginationType = \"jump\", \n  defaultPageSize = 10,\n  showSortable = TRUE,\n  bordered = FALSE,\n  compact=TRUE,\n  # details = function(index) {\n  #t1$Name[index]},\n  #  onClick = \"select\",\n  #height = 800,\n  #  width=600,\n  # defaultPageSize = 20,\n  striped = TRUE,\n  #elementId = \"cars-vis-table\",\n  elementId = \"cars-grouping-table\",\n  highlight = TRUE,\n  \n  filterable = FALSE,\n  groupBy = c(\"cohort\"),\n  columns = list(\n    Sport = colDef(name = \"Sport-AG\",\n                   align=\"left\",\n                   width=70,\n                   headerStyle = small_header_style,\n                   filterable = FALSE),\n    cohort = colDef(name = \"Jahr\",\n                    align=\"left\",\n                    minWidth=60,\n                    headerStyle = small_header_style,\n                    filterable = FALSE),\n    Sex = colDef(name=\"Geschlecht\",\n                 align=\"left\",\n                 width=70,\n                 sortable = FALSE,\n                 #  width = 50,\n                      headerStyle = small_header_style,\n                 filterable=FALSE),\n    Club = colDef(name=\"Verein\",\n                  sortable = FALSE,\n                  filterable=FALSE,\n                  width=60,\n                      headerStyle = small_header_style,\n                  align=\"left\"),\n    Name = colDef(name = \"Schule\",\n                  sortable = TRUE,\n                  show=TRUE,\n                  minWidth = 100,\n                  align=\"left\",\n                  headerStyle = small_header_style,\n                  #style = \"font-weight: 100\",\n                  # Show species under character names\n                  cell = function(value, index) {\n                    School&lt;- t1$School[index]\n                    School &lt;- if (!is.na(School)) School else \"Unknown\"\n                    div(\n                      div(style = \"font-weight: 100\", value),\n                      div(style = \"font-size: 0.75rem\", School)\n                    )\n                  }),\n    School = colDef(show=FALSE,\n                    minWidth = 100,\n                    headerStyle = small_header_style,\n                    sortable = TRUE), #Schulnummer\n    #  School = colDef(show=FALSE),\n    District = colDef(name=\"Kreis\",\n                      minWidth = 80,\n                      headerStyle = small_header_style,\n                      show=TRUE,align=\"left\",sortable = TRUE),\n    # Gesamtzahl= colDef(name=\"N\",\n    #                    width=90,\n    #                    align = \"right\",\n    #           aggregate = \"sum\",\n    #           html=TRUE,\n    #         \n    #        #   footer = function(values) \n    #         #    sprintf(\"&#x2211; %.0f\", \n    #          #           #sum(shared_data$Gesamtzahl)\n    #           #           sum(values)\n    #                     \n    #            #         )\n    #               footer = JS(\"function(colInfo) {\n    #     var total = 0\n    #     colInfo.data.forEach(function(row) {\n    #       total += row['Gesamtzahl']\n    #     })\n    #     return '&#x2211; ' + total.toFixed(0)\n    #   }\")\n    #           ),\n    auswertbar= colDef(name=\"N&lt;sub&gt;a&lt;/sub&gt;\",\n                       html=TRUE,\n                       width=90,\n                       headerStyle = small_header_style,\n                       header = with_tooltip(\"Gesamtzahl &lt;div style=\\\"font-size: 10px; font-weight:normal\\\"&gt; (Anzahl auswertbar)&lt;/div&gt;\",\"vollständig auswertbare Datensätze für diese Darstellungsform (Teilnahme an mind. 4 Testaufgaben, Information zu Geschlecht, Verein UND Sport-AG vorhanden)\"),\n                       align = \"right\",\n                       sticky = \"right\",\n                       aggregate = \"sum\",\n                       #   footer = function(values) \n                       #    sprintf(\"&#x2211; %.0f\", sum(values))\n                       #https://github.com/glin/reactable/issues/78\n                       footer = JS(\"function(colInfo) {\n        var total = 0\n        colInfo.data.forEach(function(row) {\n          total += row['auswertbar']\n        })\n        return '&#x2211; ' + total.toFixed(0)\n      }\")\n    ),\n    T= colDef(align = \"right\",\n              name=\"positiv\",\n              html=TRUE,\n              width=80,\n              headerStyle = small_header_style,\n              header = with_tooltip(\"positiv &lt;div style=\\\"font-size: 10px; font-weight:normal\\\"&gt; (Anzahl)&lt;/div&gt;\",\"'Potentielle Talente:' Anzahl an Schülerinnen und Schülern, die an mindestens vier Motorik-Tests teilnahmen UND mindestens zweimal öfter Testergebnisse im oberen Quintil als im unteren Quintil in Bezug auf die Gesamtstichprobe aus Thüringen für das jeweilige Jahr und Geschlecht erzielten.\"),\n              aggregate = \"sum\",\n              #  footer = function(values) \n              #     sprintf(\"%.0f\", sum(values))\n              footer = JS(\"function(colInfo) {\n        var total = 0\n        colInfo.data.forEach(function(row) {\n          total += row['T']\n        })\n        return '&#x2211; ' + total.toFixed(0)\n      }\")\n    ),\n    F= colDef(align = \"right\",\n              name=\"negativ\",\n              html=TRUE,\n              headerStyle = small_header_style,\n              header = with_tooltip(\"negativ &lt;div style=\\\"font-size: 10px; font-weight:normal\\\"&gt; (Anzahl)&lt;/div&gt;\",\"'Eventueller Förderbedarf:' Anzahl an Schülerinnen und Schülern, die an mindestens vier Motorik-Tests teilnahmen UND die mindestens zweimal öfter Testergebnisse im unteren Quintil als im oberen Quintil in Bezug auf die Gesamtstichprobe aus Thüringen für das jeweilige Jahr und Geschlecht erzielten.\"),\n              width=60,\n              aggregate = \"sum\",\n              #  footer = function(values) \n              #     sprintf(\"%.0f\", sum(values))\n              footer = JS(\"function(colInfo) {\n        var total = 0\n        colInfo.data.forEach(function(row) {\n          total += row['F']\n        })\n        return '&#x2211; ' + total.toFixed(0)\n      }\")\n    ),\n    N= colDef(align = \"right\",\n              name=\"unauffällig\",\n              html=TRUE,\n              headerStyle = small_header_style,\n              sticky = \"right\",\n             \n              header = with_tooltip(\"unauffällig &lt;div style=\\\"font-size: 10px; font-weight:normal\\\"&gt; (Anzahl)&lt;/div&gt;\",\"'Erwartungsgemäß:' Anzahl an Schülerinnen und Schülern, die an mindestens vier Motorik-Tests teilnahmen UND für die NICHT die anderen beiden Bedingungen zutreffen (siehe Tooltips).\"),\n              width=70,\n              aggregate = \"sum\",\n              #  footer = function(values) \n              #     sprintf(\"%.0f\", sum(values))\n              footer = JS(\"function(colInfo) {\n        var total = 0\n        colInfo.data.forEach(function(row) {\n          total += row['N']\n        })\n        return '&#x2211; ' + total.toFixed(0)\n      }\")\n            )),\ncolumnGroups = list(\n  colGroup(\n  name = \"motorisch auffällig\", \n  sticky = \"right\",\n           columns = c(\n                       \"T\",\"F\"))\n  # colGroup(name = \"Gesamtzahl\", \n  #          sticky=\"left\",\n  #          columns = c(\"Gesamtzahl\", \n  #                      \"auswertbar\"))\n  \n ))\n \n\nlibrary(jsonlite)"
  },
  {
    "objectID": "002.html#long-data",
    "href": "002.html#long-data",
    "title": "Thüringer Motorik-Klassifikation 2023",
    "section": "",
    "text": "Component &lt;- c(\"Star\",\"Run\",\"S20\",\"BPT\",\"SLJ\",\"OLB\")\n\nd_long &lt;- d |&gt; \n  pivot_longer(cols=Component,\n               names_to = \"Component\",\n               values_to = \"score\")|&gt;\n  mutate(score = as.numeric(score),\n        # change 0 values to NA\n        score = ifelse(score==0,NA,score))|&gt;\n  dplyr::select(-dateiname) |&gt;\n  # zScore based on all years\n  group_by(Sex, Component) |&gt; \n  mutate(zScore_All  = scale(score),\n         q_Upper_All = quantile(score,.80,na.rm=TRUE),\n         q_Lower_All = quantile(score,.20,na.rm=TRUE),\n         upper_all =ifelse(Component == \"Star\" | Component == \"S20\",\n                              score &lt;= q_Lower_All,\n                              score &gt;= q_Upper_All),\n         lower_all =ifelse(Component == \"Star\" | Component == \"S20\",\n                              score &gt;= q_Upper_All,\n                              score &lt;= q_Lower_All))|&gt;  \n  # zScore per Year\n  ungroup()|&gt;\n  group_by(Sex, Component, cohort) |&gt; \n  mutate(zScore_Cohort  = scale(score),\n         q_Upper_Cohort = quantile(score,.80,na.rm=TRUE),\n         q_Lower_Cohort = quantile(score,.20,na.rm=TRUE),\n         upper_cohort =ifelse(Component == \"Star\" | Component == \"S20\",\n                              score &lt;= q_Lower_Cohort,\n                              score &gt;= q_Upper_Cohort),\n         lower_cohort =ifelse(Component == \"Star\" | Component == \"S20\",\n                              score &gt;= q_Upper_Cohort,\n                              score &lt;= q_Lower_Cohort)\n         )|&gt; \n  ungroup()\n\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %&gt;% select(Component)\n\n  # Now:\n  data %&gt;% select(all_of(Component))\n\nSee &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;.\n\nd_summary &lt;- d_long |&gt; \n  dplyr::filter(Sex == \"m\" | Sex == \"w\")|&gt;\n  group_by(Child,Sex) |&gt;\n  reframe(\n   # Component=Component,\n   #  zScore_All=zScore_All,\n    Absence = sum(is.na(zScore_All)),\n    qUpperAll = sum(upper_all,na.rm=TRUE),\n    qLowerAll = sum(lower_all,na.rm = TRUE),\n    qUpperCohort = sum(upper_cohort,na.rm=TRUE),\n    qLowerCohort = sum(lower_cohort,na.rm=TRUE))|&gt;\n  ungroup()|&gt;\n  mutate(qAll = qUpperAll - qLowerAll,\n         qCohort = qUpperCohort - qLowerCohort)|&gt;\n  mutate(\n    Fitness_q_All = ifelse(Absence&lt;4,\n                           ifelse(qAll &lt;=-2,\"F\",\n                                 ifelse(qAll&gt;=2,\"T\",\n                                         ifelse(qAll&lt;2 & qAll&gt;-2,\"N\",NA))),NA),\n    Fitness_q_Cohort = ifelse(Absence&lt;4,\n                              ifelse(qCohort &lt;=-3,\"F\",\n                                     ifelse(qCohort&gt;=3,\"T\",\n                                            ifelse(-qCohort&lt;3 & qCohort&gt;-3,\"N\",NA))),NA),\n    Fitness_q_Cohort_T6 = ifelse(Absence&lt;4,\n                                 ifelse(qCohort &lt;=-2,\"F\",\n                                        ifelse(qCohort&gt;=2 & Absence ==0 ,\"T\",\n                                               ifelse((-qCohort&lt;2 & qCohort&gt;-2) | qCohort&gt;=2 & Absence !=0,\"N\",NA))),NA))\n\n    # \n    # qLowerAll = \n    #   sum((score &lt;= q_Lower_All & (Component!=\"S20\" | Component != \"Star\")) | \n    #         (score &gt;= q_Upper_All & (Component==\"S20\" | Component == \"Star\")),na.rm=TRUE),\n    # qUpperAll = \n    #   sum((score &gt;= q_Upper_All & (Component!=\"S20\" | Component != \"Star\")) |\n    #         (score &lt;= q_Lower_All & (Component==\"S20\" | Component == \"Star\")),na.rm=TRUE),\n    # qLowerCohort = \n    #   sum(((score &lt;= q_Lower_Cohort & (Component!=\"S20\" | Component != \"Star\")) |\n    #         (score &gt;= q_Upper_Cohort & (Component==\"S20\" | Component == \"Star\"))),na.rm=TRUE),\n    # qUpperCohort = \n    #   sum(((score &gt;= q_Upper_Cohort & (Component!=\"S20\" | Component != \"Star\")) |\n    #         (score &lt;= q_Lower_Cohort & (Component==\"S20\" | Component == \"Star\"))),na.rm=TRUE),\n\n\nr1 &lt;- d_summary |&gt; \n  merge(d[,c(\"Child\",\"cohort\")])|&gt; \n  pivot_longer(cols = c(\n                        Fitness_q_All,\n                        Fitness_q_Cohort,\n                        Fitness_q_Cohort_T6),\n               names_to = \"Norm\",values_to = \"Result\")|&gt;\n  group_by(Norm,Result,cohort)|&gt;\n  summarize(Number = n())|&gt;\n  pivot_wider(names_from=Norm,values_from = c(Number))|&gt;\n  t() |&gt; as.data.frame()\n\n`summarise()` has grouped output by 'Norm', 'Result'. You can override using\nthe `.groups` argument.\n\nr1\n\n                      V1   V2   V3   V4   V5   V6   V7   V8   V9  V10  V11  V12\nResult                 F    F    F    F    F    F    N    N    N    N    N    N\ncohort              2017 2018 2019 2020 2021 2022 2017 2018 2019 2020 2021 2022\nFitness_q_All        368 1288 1647  681 1632 3831  787 2721 3139 1097 2771 6124\nFitness_q_Cohort     248  856 1053  352  895 1861 1162 3923 4604 1641 4085 9116\nFitness_q_Cohort_T6  423 1482 1869  628 1603 3331  827 2820 3197 1165 2811 6531\n                     V13  V14  V15  V16  V17  V18  V19  V20  V21\nResult                 T    T    T    T    T    T &lt;NA&gt; &lt;NA&gt; &lt;NA&gt;\ncohort              2017 2018 2019 2020 2021 2022 2017 2021 2022\nFitness_q_All        520 1611 1834  568 1501 2834   38    2   23\nFitness_q_Cohort     265  841  963  353  924 1812   38    2   23\nFitness_q_Cohort_T6  425 1318 1554  553 1490 2927   38    2   23\n\nd_wide &lt;- d_long |&gt;\n#  rename(District = Kreis)|&gt;\n  pivot_wider(id_cols = c(Child,Sex,cohort,\n                          School,Name,District,\n                          lat,lon,\n                          AGS,\n                          Sport,Club,\n                          club_1,club_2,club_3,\n                          Inclusion),\n              names_from = Component,\n              values_from = c(\"score\",\"q_Upper_Cohort\",\"q_Lower_Cohort\")) |&gt;\n  merge(d_summary) \n\n\nt1 &lt;- d_wide |&gt; \n  filter(!is.na(Sport))|&gt;\n  filter(!is.na(Club))|&gt;\n  group_by(cohort,District,School,Name,Sex,Club,Sport) |&gt;\n  summarise(Gesamtzahl = n(),\n            `auswertbar` = sum(\n              (Sex==\"m\" | Sex == \"w\") & \n                Absence &lt; 4 & \n                !is.na(Sport) &\n                !is.na(Club) & \n                !is.na(Fitness_q_Cohort)),\n            T = sum(Fitness_q_Cohort ==\"T\",na.rm=TRUE),\n            F = sum(Fitness_q_Cohort ==\"F\",na.rm=TRUE),\n            N = sum(Fitness_q_Cohort ==\"N\",na.rm=TRUE)\n            ) |&gt;\n  mutate(T_rel = round(T/auswertbar*100),\n         F_rel = round(F/auswertbar*100),\n         N_rel = round(N/auswertbar*100)\n         # check_rel = T_rel + F_rel + N_rel,\n         # check = T + F + N - auswertbar\n         )|&gt;\n  ungroup()\n\n`summarise()` has grouped output by 'cohort', 'District', 'School', 'Name',\n'Sex', 'Club'. You can override using the `.groups` argument.\n\nwith_tooltip2 &lt;- function(value, tooltip) {\n  tags$abbr(style = \"text-decoration: underline; text-decoration-style: dotted; cursor: help\",\n            title = tooltip,value)\n}\n\nlibrary(tippy)\nwith_tooltip &lt;- function(value, tooltip, ...) {\n  div(style = \"text-decoration: underline; text-decoration-style: dotted; cursor: help\",\n      tippy(value, tooltip, ...))\n}\n\n\n\n\n\n\n# Render a bar chart in the background of the cell\nbar_style &lt;- function(width = 1, fill = \"#e6e6e6\", height = \"75%\",\n                      align = c(\"left\", \"right\"), color = NULL) {\n  align &lt;- match.arg(align)\n  if (align == \"left\") {\n    position &lt;- paste0(width * 100, \"%\")\n    image &lt;- sprintf(\"linear-gradient(90deg, %1$s %2$s, transparent %2$s)\", fill, position)\n  } else {\n    position &lt;- paste0(100 - width * 100, \"%\")\n    image &lt;- sprintf(\"linear-gradient(90deg, transparent %1$s, %2$s %1$s)\", position, fill)\n  }\n  list(\n    backgroundImage = image,\n    backgroundSize = paste(\"100%\", height),\n    backgroundRepeat = \"no-repeat\",\n    backgroundPosition = \"center\",\n    color = color\n  )\n}\n\nbar_chart &lt;- function(label, width = \"100%\", height = \"1rem\", fill = \"#00bfc4\", background = NULL) {\n  bar &lt;- div(style = list(background = fill, width = width, height = height))\n  chart &lt;- div(style = list(height = height,flexGrow = 1, marginLeft = \"0rem\",marginRight = \"0.5rem\", background = background), bar)\n # div(style = list(display = \"flex\", alignItems = \"left\"), label, chart)\ndiv(div(style = list(display = \"flex\", \n                 align = \"right\"), paste0(label,\" %\")),div(style = list(display = \"flex\", \n                 alignItems = \"center\"),chart))\n\n}\n# Source: https://glin.github.io/reactable/articles/custom-filtering.html\n# 2022-03-23\n# Custom range input filter with label and value\nrangeFilter1 &lt;- function(tableId, columnId, label, min, max, value = NULL, step = NULL, width = \"200px\") {\n  value &lt;- if (!is.null(value)) value else min\n  inputId &lt;- sprintf(\"filter_%s_%s\", tableId, columnId)\n  valueId &lt;- sprintf(\"filter_%s_%s__value\", tableId, columnId)\n  oninput &lt;- paste(\n    sprintf(\"document.getElementById('%s').textContent = this.value;\", valueId),\n    sprintf(\"Reactable.setFilter('%s', '%s', this.value)\", tableId, columnId)\n  )\n  \n  div(\n    tags$label(`for` = inputId, label),\n    div(\n      style = sprintf(\"display: flex; align-items: center; width: %s\", validateCssUnit(width)),\n      tags$input(\n        id = inputId,\n        type = \"range\",\n        min = min,\n        max = max,\n        step = step,\n        value = value,\n        oninput = oninput,\n        onchange = oninput, # For IE11 support\n        style = \"width: 100%;\"\n      ),\n      span(id = valueId, style = \"margin-left: 8px;\", value)\n    )\n  )\n}\n\n# Source: https://glin.github.io/reactable/articles/custom-filtering.html\nrangeFilter2 &lt;- function(values, name) {\n        tags$select(\n          # Set to undefined to clear the filter\n          onchange = sprintf(\"Reactable.setFilter('cars-select', '%s', event.target.value || undefined)\", name),\n          # \"All\" has an empty value to clear the filter, and is the default option\n          tags$option(value = \"\", \"Alle\"),\n          lapply(unique(values), tags$option),\n          \"aria-label\" = sprintf(\"Filter %s\", name),\n          style = \"width: 100%; height: 28px;\"\n        )\n}\n\n# Custom range input filter with label and value\nrangeFilter &lt;- function(tableId, columnId, label, min, max, value = NULL, step = NULL, width = \"200px\") {\n  value &lt;- if (!is.null(value)) value else min\n  inputId &lt;- sprintf(\"filter_%s_%s\", tableId, columnId)\n  valueId &lt;- sprintf(\"filter_%s_%s__value\", tableId, columnId)\n  oninput &lt;- paste(\n    sprintf(\"document.getElementById('%s').textContent = this.value;\", valueId),\n    sprintf(\"Reactable.setFilter('%s', '%s', this.value)\", tableId, columnId)\n  )\n  \n  div(\n    tags$label(`for` = inputId, label),\n    div(\n      style = sprintf(\"display: flex; align-items: center; width: %s\", validateCssUnit(width)),\n      tags$input(\n        id = inputId,\n        type = \"range\",\n        min = min,\n        max = max,\n        step = step,\n        value = value,\n        oninput = oninput,\n        onchange = oninput, # For IE11 support\n        style = \"width: 100%;\"\n      ),\n      span(id = valueId, style = \"margin-left: 8px;\", value)\n    )\n  )\n}\n\n# Filter method that filters numeric columns by minimum value\nfilterMinValue &lt;- JS(\"function(rows, columnId, filterValue) {\n  return rows.filter(function(row) {\n    return row.values[columnId] &gt;= filterValue\n  })\n}\")\n# Filter method that filters numeric columns by minimum value\nfilterMinValue &lt;- JS(\"function(rows, columnId, filterValue) {\n  return rows.filter(function(row) {\n    return row.values[columnId] &gt;= filterValue\n  })\n}\")\n\n# Source: https://github.com/glin/reactable/blob/HEAD/vignettes/popular-movies/popular-movies.Rmd\n# 2023-03-23\nselect_filter &lt;- function(id, label, shared_data, group, choices = NULL,\n                          width = \"100%\", class = \"filter-input\") {\n  values &lt;- shared_data$data()[[group]]\n  keys &lt;- shared_data$key()\n  if (is.list(values)) {\n    # Multiple values per row\n    flat_keys &lt;- unlist(mapply(rep, keys, sapply(values, length)))\n    keys_by_value &lt;- split(flat_keys, unlist(values), drop = TRUE)\n    choices &lt;- if (is.null(choices)) sort(unique(unlist(values))) else choices\n  } else {\n    # Single value per row\n    keys_by_value &lt;- split(seq_along(keys), values, drop = TRUE)\n    choices &lt;- if (is.null(choices)) sort(unique(values)) else choices\n  }\n\n  script &lt;- sprintf(\"\n    window['__ct__%s'] = (function() {\n      const handle = new window.crosstalk.FilterHandle('%s')\n      const keys = %s\n      return {\n        filter: function(value) {\n          if (!value) {\n            handle.clear()\n          } else {\n            handle.set(keys[value])\n          }\n        }\n      }\n    })()\n  \", id, shared_data$groupName(), toJSON(keys_by_value))\n\n  div(\n    class = class,\n    tags$label(`for` = id, label),\n    tags$select(\n      id = id,\n      onchange = sprintf(\"window['__ct__%s'].filter(this.value)\", id),\n      style = sprintf(\"width: %s\", validateCssUnit(width)),\n      tags$option(value = \"\", \"Alle\"),\n      lapply(choices, function(value) tags$option(value = value, value))\n    ),\n    tags$script(HTML(script))\n  )\n}\n\n# https://glin.github.io/reactable/articles/custom-filtering.html\n# 2023-02-23\n# Creates a data list column filter for a table with the given ID\ndataListFilter &lt;- function(tableId, style = \"width: 100%; height: 28px;\") {\n  function(values, name) {\n    dataListId &lt;- sprintf(\"%s-%s-list\", tableId, name)\n    tagList(\n      tags$input(\n        type = \"text\",\n        list = dataListId,\n        oninput = sprintf(\"Reactable.setFilter('%s', '%s', event.target.value || undefined)\", tableId, name),\n        \"aria-label\" = sprintf(\"Filter %s\", name),\n        style = style\n      ),\n      tags$datalist(\n        id = dataListId,\n        lapply(unique(values), function(value) tags$option(value = value))\n      )\n    )\n  }\n}\n\n\n\n\n\n\nlibrary(crosstalk)\n# shared table\nt2 &lt;- t1 |&gt; select(-Gesamtzahl,-T_rel,-F_rel,-N_rel)\nshared_data &lt;- SharedData$new(t2)\n\n# styles\nsticky_style &lt;- list(backgroundColor = \"#f7f7f7\")\nsticky_style_r &lt;- list(borderTop = \"0px solid #eee\",borderLeft = \"0px solid #eee\",borderRight = \"0px solid #eee\")\n\nrotate_header_style&lt;- list(\n          `white-space` = \"nowrap\",\n          `transform-origin` = \"0% 50%\",\n           transform = \"rotate(-90deg)\",\n          `margin-top` = \"10px\",\n          `margin-bottom` = \"10px\",\n           borderColor = \"#ffffff\"\n        )\nsmall_header_style &lt;- list(`font-size` =  \"10px\")\nsticky_style_l &lt;- list(borderLeft = \"0px solid #eee\")\n\nlibrary(htmltools)\n# reactable\ntbl&lt;-reactable(\n  shared_data,\n  defaultColDef = colDef(\n  #  headerStyle = sticky_style_r,\n    align = \"right\",\n    footerStyle = list(fontWeight = \"bold\"),\n    #   maxWidth = 120,\n    vAlign=\"top\"),\n  searchable = TRUE,\n  resizable = TRUE,\n  wrap = TRUE,\n  pagination=TRUE,\n  paginateSubRows = TRUE,\n  # paginationType = \"jump\", \n  defaultPageSize = 10,\n  showSortable = TRUE,\n  bordered = FALSE,\n  compact=TRUE,\n  # details = function(index) {\n  #t1$Name[index]},\n  #  onClick = \"select\",\n  #height = 800,\n  #  width=600,\n  # defaultPageSize = 20,\n  striped = TRUE,\n  #elementId = \"cars-vis-table\",\n  elementId = \"cars-grouping-table\",\n  highlight = TRUE,\n  \n  filterable = FALSE,\n  groupBy = c(\"cohort\"),\n  columns = list(\n    Sport = colDef(name = \"Sport-AG\",\n                   align=\"left\",\n                   width=70,\n                   headerStyle = small_header_style,\n                   filterable = FALSE),\n    cohort = colDef(name = \"Jahr\",\n                    align=\"left\",\n                    minWidth=60,\n                    headerStyle = small_header_style,\n                    filterable = FALSE),\n    Sex = colDef(name=\"Geschlecht\",\n                 align=\"left\",\n                 width=70,\n                 sortable = FALSE,\n                 #  width = 50,\n                      headerStyle = small_header_style,\n                 filterable=FALSE),\n    Club = colDef(name=\"Verein\",\n                  sortable = FALSE,\n                  filterable=FALSE,\n                  width=60,\n                      headerStyle = small_header_style,\n                  align=\"left\"),\n    Name = colDef(name = \"Schule\",\n                  sortable = TRUE,\n                  show=TRUE,\n                  minWidth = 100,\n                  align=\"left\",\n                  headerStyle = small_header_style,\n                  #style = \"font-weight: 100\",\n                  # Show species under character names\n                  cell = function(value, index) {\n                    School&lt;- t1$School[index]\n                    School &lt;- if (!is.na(School)) School else \"Unknown\"\n                    div(\n                      div(style = \"font-weight: 100\", value),\n                      div(style = \"font-size: 0.75rem\", School)\n                    )\n                  }),\n    School = colDef(show=FALSE,\n                    minWidth = 100,\n                    headerStyle = small_header_style,\n                    sortable = TRUE), #Schulnummer\n    #  School = colDef(show=FALSE),\n    District = colDef(name=\"Kreis\",\n                      minWidth = 80,\n                      headerStyle = small_header_style,\n                      show=TRUE,align=\"left\",sortable = TRUE),\n    # Gesamtzahl= colDef(name=\"N\",\n    #                    width=90,\n    #                    align = \"right\",\n    #           aggregate = \"sum\",\n    #           html=TRUE,\n    #         \n    #        #   footer = function(values) \n    #         #    sprintf(\"&#x2211; %.0f\", \n    #          #           #sum(shared_data$Gesamtzahl)\n    #           #           sum(values)\n    #                     \n    #            #         )\n    #               footer = JS(\"function(colInfo) {\n    #     var total = 0\n    #     colInfo.data.forEach(function(row) {\n    #       total += row['Gesamtzahl']\n    #     })\n    #     return '&#x2211; ' + total.toFixed(0)\n    #   }\")\n    #           ),\n    auswertbar= colDef(name=\"N&lt;sub&gt;a&lt;/sub&gt;\",\n                       html=TRUE,\n                       width=90,\n                       headerStyle = small_header_style,\n                       header = with_tooltip(\"Gesamtzahl &lt;div style=\\\"font-size: 10px; font-weight:normal\\\"&gt; (Anzahl auswertbar)&lt;/div&gt;\",\"vollständig auswertbare Datensätze für diese Darstellungsform (Teilnahme an mind. 4 Testaufgaben, Information zu Geschlecht, Verein UND Sport-AG vorhanden)\"),\n                       align = \"right\",\n                       sticky = \"right\",\n                       aggregate = \"sum\",\n                       #   footer = function(values) \n                       #    sprintf(\"&#x2211; %.0f\", sum(values))\n                       #https://github.com/glin/reactable/issues/78\n                       footer = JS(\"function(colInfo) {\n        var total = 0\n        colInfo.data.forEach(function(row) {\n          total += row['auswertbar']\n        })\n        return '&#x2211; ' + total.toFixed(0)\n      }\")\n    ),\n    T= colDef(align = \"right\",\n              name=\"positiv\",\n              html=TRUE,\n              width=80,\n              headerStyle = small_header_style,\n              header = with_tooltip(\"positiv &lt;div style=\\\"font-size: 10px; font-weight:normal\\\"&gt; (Anzahl)&lt;/div&gt;\",\"'Potentielle Talente:' Anzahl an Schülerinnen und Schülern, die an mindestens vier Motorik-Tests teilnahmen UND mindestens zweimal öfter Testergebnisse im oberen Quintil als im unteren Quintil in Bezug auf die Gesamtstichprobe aus Thüringen für das jeweilige Jahr und Geschlecht erzielten.\"),\n              aggregate = \"sum\",\n              #  footer = function(values) \n              #     sprintf(\"%.0f\", sum(values))\n              footer = JS(\"function(colInfo) {\n        var total = 0\n        colInfo.data.forEach(function(row) {\n          total += row['T']\n        })\n        return '&#x2211; ' + total.toFixed(0)\n      }\")\n    ),\n    F= colDef(align = \"right\",\n              name=\"negativ\",\n              html=TRUE,\n              headerStyle = small_header_style,\n              header = with_tooltip(\"negativ &lt;div style=\\\"font-size: 10px; font-weight:normal\\\"&gt; (Anzahl)&lt;/div&gt;\",\"'Eventueller Förderbedarf:' Anzahl an Schülerinnen und Schülern, die an mindestens vier Motorik-Tests teilnahmen UND die mindestens zweimal öfter Testergebnisse im unteren Quintil als im oberen Quintil in Bezug auf die Gesamtstichprobe aus Thüringen für das jeweilige Jahr und Geschlecht erzielten.\"),\n              width=60,\n              aggregate = \"sum\",\n              #  footer = function(values) \n              #     sprintf(\"%.0f\", sum(values))\n              footer = JS(\"function(colInfo) {\n        var total = 0\n        colInfo.data.forEach(function(row) {\n          total += row['F']\n        })\n        return '&#x2211; ' + total.toFixed(0)\n      }\")\n    ),\n    N= colDef(align = \"right\",\n              name=\"unauffällig\",\n              html=TRUE,\n              headerStyle = small_header_style,\n              sticky = \"right\",\n             \n              header = with_tooltip(\"unauffällig &lt;div style=\\\"font-size: 10px; font-weight:normal\\\"&gt; (Anzahl)&lt;/div&gt;\",\"'Erwartungsgemäß:' Anzahl an Schülerinnen und Schülern, die an mindestens vier Motorik-Tests teilnahmen UND für die NICHT die anderen beiden Bedingungen zutreffen (siehe Tooltips).\"),\n              width=70,\n              aggregate = \"sum\",\n              #  footer = function(values) \n              #     sprintf(\"%.0f\", sum(values))\n              footer = JS(\"function(colInfo) {\n        var total = 0\n        colInfo.data.forEach(function(row) {\n          total += row['N']\n        })\n        return '&#x2211; ' + total.toFixed(0)\n      }\")\n            )),\ncolumnGroups = list(\n  colGroup(\n  name = \"motorisch auffällig\", \n  sticky = \"right\",\n           columns = c(\n                       \"T\",\"F\"))\n  # colGroup(name = \"Gesamtzahl\", \n  #          sticky=\"left\",\n  #          columns = c(\"Gesamtzahl\", \n  #                      \"auswertbar\"))\n  \n ))\n \n\nlibrary(jsonlite)"
  },
  {
    "objectID": "003.html",
    "href": "003.html",
    "title": "Sport-Veranstaltungen",
    "section": "",
    "text": "(A) Räumliche Verteilung und (B) Anzahl der Sport-Veranstaltungen seit dem Jahr 2018\n\n\n\n\n\n\n\n\n\n\n\n\n\nAktualisierungen\n\n\n2023-05-09: Entfernung BibTeX-Zitation, Figure-Caption an Rand, License\n2023-05-08: Zusammenfassung, Umstrukturierung\n2023-05-03: COVID-19-Pandemie Annnotation in Balkendiagramm\n2023-04-25: Erstellen der Seite\n\n\n\nWiederverwendunghttps://creativecommons.org/licenses/by/4.0/deed.deZitatBitte zitieren Sie diese Arbeit als:\nWöhrl, T., & Bähr, F. (2023, April 25).\nSport-Veranstaltungen. https://bekigeki.github.io/003.html"
  }
]